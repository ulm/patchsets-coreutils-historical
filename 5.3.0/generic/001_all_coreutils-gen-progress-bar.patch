Upstream has been contacted about this a few times ...

they dont want progress bars in mv/cp:
http://lists.gnu.org/archive/html/bug-coreutils/2003-08/msg00114.html
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00083.html
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00084.html

but they don't seem to mind a general util ... add this to future patchset:
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00101.html
http://lists.gnu.org/archive/html/bug-coreutils/2004-02/msg00071.html

diff -urN 1/src/copy.c 2/src/copy.c
--- 1/src/copy.c	2004-09-20 08:27:12.000000000 +0100
+++ 2/src/copy.c	2005-03-26 15:53:57.000000000 +0000
@@ -17,6 +17,8 @@
 
 /* Extracted from cp.c and librarified by Jim Meyering.  */
 
+/* Progress bar support added by Miika Pekkarinen. miipekk@ihme.org */
+
 #include <config.h>
 #include <stdio.h>
 #include <assert.h>
@@ -26,6 +28,10 @@
 # include <hurd.h>
 #endif
 
+#ifdef GWINSZ_IN_SYS_IOCTL
+# include <sys/ioctl.h>
+#endif
+
 #include "system.h"
 #include "backupfile.h"
 #include "copy.h"
@@ -44,3 +50,4 @@
 #include "savedir.h"
 #include "utimens.h"
+#include "xstrtol.h"
 #include "xreadlink.h"
@@ -80,6 +87,8 @@
 /* Initial size of the above hash table.  */
 #define DEST_INFO_INITIAL_CAPACITY 61
 
+#define SAMPLE_MAX 10
+
 static bool copy_internal (const char *src_path, const char *dst_path,
 			   bool new_dst, dev_t device,
 			   struct dir_list *ancestors,
@@ -186,6 +195,62 @@
   return ok;
 }
 
+/* Shorten a string '/long path/long file' to 'long fi...'
+   Also adds padding bytes to end of the string if necessary */
+char *shorten_path(const char *str, int max_width)
+{
+  char *shortname;
+  char *filename = (char *) (rindex(str, '/'));
+  int len;
+  
+  if (filename == NULL)
+    {
+      filename = (char *) str;
+    }
+  else
+    {
+      filename = (char *) &filename[1];
+    }
+
+  len = strlen(filename);
+  shortname = (char *) xmalloc (max_width + 1);
+  strncpy (shortname, filename, max_width);
+  shortname[max_width] = '\0';
+  if (len > max_width)
+    {
+      memset(&shortname[max_width - 3], '.', 3);
+    }
+  else
+    {
+      memset(&shortname[len], ' ', max_width - len);
+    }
+
+  return shortname;
+}
+
+char *si_units(off_t size)
+{
+  const static int buf_size = 20;
+  char *buf;
+  static char *unit_array[] = { "B", "KiB", "MiB", "GiB", "" };
+  int i;
+  
+  buf = xmalloc(20);
+  for (i = 0; size > 10000; i++)
+    {
+      if (unit_array[i][0] == '\0')
+	{
+	  i--;
+	  break;
+	}
+      size /= 1024;
+    }
+
+  snprintf (buf, buf_size, "%lu %s", (unsigned long)size, unit_array[i]);
+
+  return buf;
+}
+
 /* Copy a regular file from SRC_PATH to DST_PATH.
    If the source file contains holes, copies holes and blocks of zeros
    in the source file as holes in the destination file.
@@ -214,6 +279,19 @@
   off_t n_read_total = 0;
   bool last_write_made_hole = false;
   bool make_holes = false;
+  time_t t_start;
+  time_t t_last;
+  time_t t_now;
+  int last_bytes = 0;
+  int progress_bar_printed = 0;
+  char *shortname = NULL;
+  off_t sample_window[SAMPLE_MAX];
+  off_t sample_sum = 0;
+  int sample_count = 0;
+  int line_length = 0;
+#ifdef TIOCGWINSZ
+  struct winsize ws;
+#endif
 
   source_desc = open (src_path, O_RDONLY);
   if (source_desc < 0)
@@ -318,6 +396,9 @@
   buf = alloca (buf_size + sizeof (int) + buf_alignment - 1);
   buf = ptr_align (buf, buf_alignment);
 
+  time (&t_start);
+  t_last = t_start;
+
   for (;;)
     {
       ssize_t n_read = read (source_desc, buf, buf_size);
@@ -382,6 +463,113 @@
 	    }
 	  last_write_made_hole = false;
 	}
+      
+      time (&t_now);
+      
+      /* Progress bar stuff */
+      if (! x->pbar_show || t_now - t_start < x->pbar_delay)
+        {
+	  continue;
+	}
+      
+      if (! progress_bar_printed)
+	{
+          /* Column width check code copied from ls.c */
+          char const *p = getenv ("COLUMNS");
+          if (p && *p)
+            {
+	      long int tmp_long;
+	      if (xstrtol (p, NULL, 0, &tmp_long, NULL) == LONGINT_OK
+		  && 0 < tmp_long && tmp_long <= INT_MAX)
+		{
+		  line_length = (int) tmp_long;
+		}
+	      else
+		{
+		  error (0, 0,
+			 _("ignoring invalid width in environment \
+                      variable COLUMNS: %s"),
+			 quotearg (p));
+		}
+            }
+	  
+#ifdef TIOCGWINSZ
+	  if (ioctl (STDOUT_FILENO, TIOCGWINSZ, &ws) != -1 && ws.ws_col != 0)
+	    {
+	      line_length = ws.ws_col;
+	    }
+#endif
+	  if (line_length < 50)
+	    {
+	      continue;
+	    }
+
+	  /* Take a short filename for progress bar */
+	  shortname = shorten_path(src_path, line_length - 48);
+	  progress_bar_printed = 1;
+        }
+      
+      if (t_now == t_last)
+        {
+          continue;
+        }
+      
+      if (sample_count == SAMPLE_MAX)
+        {
+          int i;
+	  
+          sample_sum -= sample_window[0];
+          for (i = 0; i < SAMPLE_MAX - 1; i++)
+	    {
+	      sample_window[i] = sample_window[i + 1];
+	    }
+	}
+      else
+	{
+	  sample_count++;
+	}
+      
+      {
+	char *str_size;
+	char *str_speed;
+	char etabuf[64];
+	time_t t_temp;
+	      
+        sample_window[sample_count - 1] = (n_read_total - last_bytes) /
+                      (t_now - t_last);
+        sample_sum += sample_window[sample_count - 1];
+      
+        /* Calculate the remaining time */
+        t_temp = (src_open_sb.st_size - n_read_total) / (sample_sum / sample_count);
+
+	/* Don't print the progress bar if the estimated remaining
+	   time is low. */
+	if (progress_bar_printed == 1 && t_temp < x->pbar_min_est)
+	  {
+	    continue;
+	  }
+	progress_bar_printed = 2;
+
+	str_size = si_units(src_open_sb.st_size);
+	str_speed = si_units(sample_sum / sample_count);
+
+        strftime(etabuf, sizeof etabuf, "%H:%M.%S", 
+                 gmtime(&t_temp));
+        printf (_("%s | %3d%% | %9s | %9s/s | ETA %s\r"), shortname,
+                (int)(n_read_total * 100 / src_open_sb.st_size),
+                str_size, str_speed, etabuf);
+        fflush (stdout);
+	free(str_size);
+	free(str_speed);
+        t_last = t_now;
+        last_bytes = n_read_total;
+      }
+    }
+  
+  /* Print a newline if progress bar is enabled and has been shown */
+  if (progress_bar_printed == 2)
+    {
+      printf ("%s | 100%%\n", shortname);
     }
 
   /* If the file ends with a `hole', something needs to be written at
@@ -418,6 +606,11 @@
       return_val = false;
     }
 
+  if (shortname != NULL)
+    {
+      free (shortname);
+    }
+
   return return_val;
 }
 
diff -urN 1/src/copy.h 2/src/copy.h
--- 1/src/copy.h	2004-11-26 09:03:45.000000000 +0000
+++ 2/src/copy.h	2005-03-26 15:44:50.000000000 +0000
@@ -154,6 +154,16 @@
   /* If true, display the names of the files before copying them. */
   bool verbose;
 
+  /* If true, display a progress bar when the following conditions are
+   * met:
+     - pbar_delay defines how many seconds to wait before considering to
+	   display the progress bar
+	 - pbar_min_est defines how many seconds estimated operation complete
+	   time should be at least to show the progress bar. */
+  bool pbar_show;
+  int pbar_delay;
+  int pbar_min_est;
+
   /* If true, stdin is a tty.  */
   bool stdin_tty;
 
diff -urN 1/src/cp.c 2/src/cp.c
--- 1/src/cp.c	2004-10-10 20:10:09.000000000 +0100
+++ 2/src/cp.c	2005-03-26 15:46:00.000000000 +0000
@@ -84,6 +84,14 @@
 /* Initial number of entries in the inode hash table.  */
 #define INITIAL_ENTRY_TAB_SIZE 70
 
+/* Initial settings for progress bar when it's enabled.
+   PROGRESS_DELAY defines how many seconds to wait before even
+   considering to display a proggress bar.
+   PROGRESS_MIN_EST defines how many seconds estimated operation
+   complete time should be at least to show the progress bar. */
+#define PROGRESS_DELAY    5
+#define PROGRESS_MIN_EST  5
+
 /* The invocation name of this program.  */
 char *program_name;
 
@@ -123,6 +131,7 @@
   {"copy-contents", no_argument, NULL, COPY_CONTENTS_OPTION},
   {"dereference", no_argument, NULL, 'L'},
   {"force", no_argument, NULL, 'f'},
+  {"progress", no_argument, NULL, 'g'},
   {"interactive", no_argument, NULL, 'i'},
   {"link", no_argument, NULL, 'l'},
   {"no-dereference", no_argument, NULL, 'P'},
@@ -180,6 +189,8 @@
       --no-dereference         never follow symbolic links\n\
   -f, --force                  if an existing destination file cannot be\n\
                                  opened, remove it and try again\n\
+  -g, --progress               show a progress bar if operation is going to\n\
+                                 take a long time\n\
   -i, --interactive            prompt before overwrite\n\
   -H                           follow command-line symbolic links\n\
 "), stdout);
@@ -711,6 +722,11 @@
 
   x->update = false;
   x->verbose = false;
+
+  x->pbar_show = false;
+  x->pbar_delay = PROGRESS_DELAY;
+  x->pbar_min_est = PROGRESS_MIN_EST;
+
   x->dest_info = NULL;
   x->src_info = NULL;
 }
@@ -817,7 +833,7 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
-  while ((c = getopt_long (argc, argv, "abdfHilLprst:uvxPRS:TV:",
+  while ((c = getopt_long (argc, argv, "abdfgHilLprst:uvxPRS:TV:",
 			   long_opts, NULL))
 	 != -1)
     {
@@ -887,6 +903,10 @@
 	case NO_PRESERVE_ATTRIBUTES_OPTION:
 	  decode_preserve_arg (optarg, &x, false);
 	  break;
+		
+	case 'g':
+	  x.pbar_show = 1;
+	  break;
 
 	case PRESERVE_ATTRIBUTES_OPTION:
 	  if (optarg == NULL)
diff -urN 1/src/mv.c 2/src/mv.c
--- 1/src/mv.c	2004-09-22 13:41:20.000000000 +0100
+++ 2/src/mv.c	2005-03-26 15:48:35.000000000 +0000
@@ -45,6 +45,14 @@
 /* Initial number of entries in the inode hash table.  */
 #define INITIAL_ENTRY_TAB_SIZE 70
 
+/* Initial settings for progress bar when it's enabled.
+   PROGRESS_DELAY defines how many seconds to wait before even
+   considering to display a proggress bar.
+   PROGRESS_MIN_EST defines how many seconds estimated operation
+   complete time should be at least to show the progress bar. */
+#define PROGRESS_DELAY    5
+#define PROGRESS_MIN_EST  5
+
 /* For long options that have no equivalent short option, use a
    non-character as a pseudo short option, starting with CHAR_MAX + 1.  */
 enum
@@ -75,6 +83,7 @@
 {
   {"backup", optional_argument, NULL, 'b'},
   {"force", no_argument, NULL, 'f'},
+  {"progress", no_argument, NULL, 'g'},
   {"interactive", no_argument, NULL, 'i'},
   {"no-target-directory", no_argument, NULL, 'T'},
   {"reply", required_argument, NULL, REPLY_OPTION},
@@ -143,6 +152,10 @@
 
   x->update = false;
   x->verbose = false;
+  x->pbar_show = false;
+  x->pbar_delay = PROGRESS_DELAY;
+  x->pbar_min_est = PROGRESS_MIN_EST;
+
   x->dest_info = NULL;
   x->src_info = NULL;
 }
@@ -313,6 +326,8 @@
   -b                           like --backup but does not accept an argument\n\
   -f, --force                  do not prompt before overwriting\n\
                                  (equivalent to --reply=yes)\n\
+  -g, --progress               show a progress bar if operation is going to\n\
+                                 take a long time\n\
   -i, --interactive            prompt before overwrite\n\
                                  (equivalent to --reply=query)\n\
 "), stdout);
@@ -357,6 +372,9 @@
   int c;
   bool ok;
   bool make_backups = false;
+  bool pbar_show = false;
+  int pbar_delay = PROGRESS_DELAY;
+  int pbar_min_est = PROGRESS_MIN_EST;
   char *backup_suffix_string;
   char *version_control_string = NULL;
   struct cp_options x;
@@ -379,7 +397,7 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
-  while ((c = getopt_long (argc, argv, "bfit:uvS:TV:", long_options, NULL))
+  while ((c = getopt_long (argc, argv, "bfgit:uvS:TV:", long_options, NULL))
 	 != -1)
     {
       switch (c)
@@ -399,6 +417,9 @@
 	case 'f':
 	  x.interactive = I_ALWAYS_YES;
 	  break;
+	case 'g':
+	  x.pbar_show = 1;
+	  break;
 	case 'i':
 	  x.interactive = I_ASK_USER;
 	  break;
