diff -urN coreutils-5.2.1.orig/man/Makefile.am coreutils-5.2.1/man/Makefile.am
--- coreutils-5.2.1.orig/man/Makefile.am	2004-06-17 13:23:40.017692000 -0500
+++ coreutils-5.2.1/man/Makefile.am	2004-06-17 13:42:51.820685714 -0500
@@ -10,7 +10,7 @@
   seq.1 sha1sum.1 shred.1 sleep.1 sort.1 split.1 stat.1 stty.1 \
   sum.1 sync.1 tac.1 tail.1 tee.1 test.1 tr.1 true.1 tsort.1 \
   tty.1 uname.1 unexpand.1 uniq.1 unlink.1 users.1 wc.1 \
-  who.1 whoami.1 yes.1
+  who.1 whoami.1 yes.1 chcon.1 runcon.1
 
 man_aux = $(dist_man_MANS:.1=.x)
 
@@ -87,6 +87,8 @@
 who.1:		$(common_dep)	$(srcdir)/who.x		../src/who.c
 whoami.1:	$(common_dep)	$(srcdir)/whoami.x	../src/whoami.c
 yes.1:		$(common_dep)	$(srcdir)/yes.x		../src/yes.c
+chcon.1:	$(common_dep)	$(srcdir)/chcon.x	../src/chcon.c
+runcon.1:	$(common_dep)	$(srcdir)/runcon.x	../src/runcon.c
 
 SUFFIXES = .x .1
 
diff -urN coreutils-5.2.1.orig/man/Makefile.in coreutils-5.2.1/man/Makefile.in
--- coreutils-5.2.1.orig/man/Makefile.in	2004-06-17 13:22:53.668002000 -0500
+++ coreutils-5.2.1/man/Makefile.in	2004-06-17 13:42:51.823685433 -0500
@@ -273,7 +273,7 @@
   seq.1 sha1sum.1 shred.1 sleep.1 sort.1 split.1 stat.1 stty.1 \
   sum.1 sync.1 tac.1 tail.1 tee.1 test.1 tr.1 true.1 tsort.1 \
   tty.1 uname.1 unexpand.1 uniq.1 unlink.1 users.1 wc.1 \
-  who.1 whoami.1 yes.1
+  who.1 whoami.1 yes.1 chcon.1 runcon.1
 
 man_aux = $(dist_man_MANS:.1=.x)
 EXTRA_DIST = $(man_aux) help2man
@@ -569,6 +569,8 @@
 who.1:		$(common_dep)	$(srcdir)/who.x		../src/who.c
 whoami.1:	$(common_dep)	$(srcdir)/whoami.x	../src/whoami.c
 yes.1:		$(common_dep)	$(srcdir)/yes.x		../src/yes.c
+chcon.1:	$(common_dep)	$(srcdir)/chcon.x	../src/chcon.c
+runcon.1:	$(common_dep)	$(srcdir)/runcon.x	../src/runcon.c
 
 # Note the use of $t/$*, rather than just `$*' as in other packages.
 # That is necessary to avoid failures for programs that are also shell built-in
diff -urN coreutils-5.2.1.orig/man/chcon.1 coreutils-5.2.1/man/chcon.1
--- coreutils-5.2.1.orig/man/chcon.1	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/man/chcon.1	2004-06-17 13:42:51.852682711 -0500
@@ -0,0 +1,52 @@
+.TH CHCON 1 "July 2003" "chcon (coreutils) 5.0" "User Commands"
+.SH NAME
+chcon \- change security context
+.SH SYNOPSIS
+.B chcon
+[\fIOPTION\fR]...\fI CONTEXT FILE\fR...
+.br
+.B chcon
+[\fIOPTION\fR]...\fI --reference=RFILE FILE\fR...
+.SH DESCRIPTION
+.PP
+." Add any additional description here
+.PP
+Change the security context of each FILE to CONTEXT.
+.TP
+\fB\-c\fR, \fB\-\-changes\fR
+like verbose but report only when a change is made
+.TP
+\fB\-h\fR, \fB\-\-no\-dereference\fR
+affect symbolic links instead of any referenced file (available only on systems with lchown system call)
+.TP
+\fB\-f\fR, \fB\-\-silent\fR, \fB\-\-quiet\fR
+suppress most error messages
+.TP
+\fB\-\-reference\fR=\fIRFILE\fR
+use RFILE's context instead of using a CONTEXT value
+.TP
+\fB\-R\fR, \fB\-\-recursive\fR
+change files and directories recursively
+.TP
+\fB\-v\fR, \fB\-\-verbose\fR
+output a diagnostic for every file processed
+.TP
+\fB\-\-help\fR
+display this help and exit
+.TP
+\fB\-\-version\fR
+output version information and exit
+.SH "REPORTING BUGS"
+Report bugs to <email@host.com>.
+.SH "SEE ALSO"
+The full documentation for
+.B chcon
+is maintained as a Texinfo manual.  If the
+.B info
+and
+.B chcon
+programs are properly installed at your site, the command
+.IP
+.B info chcon
+.PP
+should give you access to the complete manual.
diff -urN coreutils-5.2.1.orig/man/chcon.x coreutils-5.2.1/man/chcon.x
--- coreutils-5.2.1.orig/man/chcon.x	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/man/chcon.x	2004-06-17 13:42:51.863681678 -0500
@@ -0,0 +1,4 @@
+[NAME]
+chcon \- change file security context
+[DESCRIPTION]
+.\" Add any additional description here
diff -urN coreutils-5.2.1.orig/man/cp.1 coreutils-5.2.1/man/cp.1
--- coreutils-5.2.1.orig/man/cp.1	2004-03-02 16:51:05.000000000 -0600
+++ coreutils-5.2.1/man/cp.1	2004-06-17 13:42:51.865681491 -0500
@@ -57,7 +57,7 @@
 .TP
 \fB\-\-preserve\fR[=\fIATTR_LIST\fR]
 preserve the specified attributes (default:
-mode,ownership,timestamps), if possible
+mode,ownership,timestamps) and security contexts, if possible
 additional attributes: links, all
 .TP
 \fB\-\-no\-preserve\fR=\fIATTR_LIST\fR
@@ -109,6 +109,9 @@
 \fB\-\-help\fR
 display this help and exit
 .TP
+\fB\-X\fR, \fB\-\-context\fR=\fICONTEXT\fR
+set security context of copy to CONTEXT
+.TP
 \fB\-\-version\fR
 output version information and exit
 .PP
diff -urN coreutils-5.2.1.orig/man/dir.1 coreutils-5.2.1/man/dir.1
--- coreutils-5.2.1.orig/man/dir.1	2004-03-02 16:51:06.000000000 -0600
+++ coreutils-5.2.1/man/dir.1	2004-06-17 13:42:51.877680364 -0500
@@ -202,6 +202,20 @@
 \fB\-\-version\fR
 output version information and exit
 .PP
+SELinux options:
+.TP
+\fB\-\-lcontext\fR
+Display security context.   Enable \fB\-l\fR. Lines
+will probably be too wide for most displays.
+.TP
+\fB\-\-context\fR
+Display security context so it fits on most
+displays.  Displays only mode, user, group,
+security context and file name.
+.TP
+\fB\-\-scontext\fR
+Display only security context and file name.
+.PP
 SIZE may be (or may be an integer optionally followed by) one of following:
 kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.
 .PP
diff -urN coreutils-5.2.1.orig/man/id.1 coreutils-5.2.1/man/id.1
--- coreutils-5.2.1.orig/man/id.1	2004-03-02 16:52:27.000000000 -0600
+++ coreutils-5.2.1/man/id.1	2004-06-17 13:42:51.888679332 -0500
@@ -13,6 +13,9 @@
 \fB\-a\fR
 ignore, for compatibility with other versions
 .TP
+\fB\-c\fR, \fB\-\-context\fR
+print only the security context
+.TP
 \fB\-g\fR, \fB\-\-group\fR
 print only the effective group ID
 .TP
diff -urN coreutils-5.2.1.orig/man/install.1 coreutils-5.2.1/man/install.1
--- coreutils-5.2.1.orig/man/install.1	2004-03-02 16:52:27.000000000 -0600
+++ coreutils-5.2.1/man/install.1	2004-06-17 13:42:51.891679050 -0500
@@ -62,6 +62,11 @@
 .TP
 \fB\-\-version\fR
 output version information and exit
+.HP
+\fB\-P\fR, \fB\-\-preserve_context\fR (SELinux) Preserve security context
+.TP
+\fB\-X\fR, \fB\-\-context\fR=\fICONTEXT\fR
+(SELinux) Set security context of files and directories
 .PP
 The backup suffix is `~', unless set with \fB\-\-suffix\fR or SIMPLE_BACKUP_SUFFIX.
 The version control method may be selected via the \fB\-\-backup\fR option or through
diff -urN coreutils-5.2.1.orig/man/ls.1 coreutils-5.2.1/man/ls.1
--- coreutils-5.2.1.orig/man/ls.1	2004-03-02 16:52:28.000000000 -0600
+++ coreutils-5.2.1/man/ls.1	2004-06-17 13:42:51.904677830 -0500
@@ -202,6 +202,20 @@
 \fB\-\-version\fR
 output version information and exit
 .PP
+SELinux options:
+.TP
+\fB\-\-lcontext\fR
+Display security context.   Enable \fB\-l\fR. Lines
+will probably be too wide for most displays.
+.TP
+\fB\-\-context\fR
+Display security context so it fits on most
+displays.  Displays only mode, user, group,
+security context and file name.
+.TP
+\fB\-\-scontext\fR
+Display only security context and file name.
+.PP
 SIZE may be (or may be an integer optionally followed by) one of following:
 kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.
 .PP
diff -urN coreutils-5.2.1.orig/man/mkdir.1 coreutils-5.2.1/man/mkdir.1
--- coreutils-5.2.1.orig/man/mkdir.1	2004-03-02 16:52:28.000000000 -0600
+++ coreutils-5.2.1/man/mkdir.1	2004-06-17 13:42:51.915676798 -0500
@@ -12,6 +12,8 @@
 .PP
 Mandatory arguments to long options are mandatory for short options too.
 .TP
+\fB\-c\fR, \fB\-\-context\fR=\fICONTEXT\fR (SELinux) set security context to CONTEXT
+.TP
 \fB\-m\fR, \fB\-\-mode\fR=\fIMODE\fR
 set permission mode (as in chmod), not rwxrwxrwx - umask
 .TP
diff -urN coreutils-5.2.1.orig/man/mkfifo.1 coreutils-5.2.1/man/mkfifo.1
--- coreutils-5.2.1.orig/man/mkfifo.1	2004-03-02 16:52:28.000000000 -0600
+++ coreutils-5.2.1/man/mkfifo.1	2004-06-17 13:42:51.926675766 -0500
@@ -12,6 +12,9 @@
 .PP
 Mandatory arguments to long options are mandatory for short options too.
 .TP
+\fB\-c\fR, \fB\-\-context\fR=\fICONTEXT\fR
+set security context (quoted string)
+.TP
 \fB\-m\fR, \fB\-\-mode\fR=\fIMODE\fR
 set permission mode (as in chmod), not a=rw - umask
 .TP
diff -urN coreutils-5.2.1.orig/man/mknod.1 coreutils-5.2.1/man/mknod.1
--- coreutils-5.2.1.orig/man/mknod.1	2004-03-02 16:52:28.000000000 -0600
+++ coreutils-5.2.1/man/mknod.1	2004-06-17 13:42:51.928675578 -0500
@@ -12,6 +12,9 @@
 .PP
 Mandatory arguments to long options are mandatory for short options too.
 .TP
+\fB\-c\fR, \fB\-\-context\fR=\fICONTEXT\fR
+set security context (quoted string)
+.TP
 \fB\-m\fR, \fB\-\-mode\fR=\fIMODE\fR
 set permission mode (as in chmod), not a=rw - umask
 .TP
diff -urN coreutils-5.2.1.orig/man/runcon.1 coreutils-5.2.1/man/runcon.1
--- coreutils-5.2.1.orig/man/runcon.1	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/man/runcon.1	2004-06-17 13:42:51.940674452 -0500
@@ -0,0 +1,39 @@
+.TH RUNCON "1" "July 2003" "runcon (coreutils) 5.0" "selinux"
+.SH NAME
+runcon \- run command with specified security context 
+.SH SYNOPSIS
+.B runcon
+[\fI-t TYPE\fR] [\fI-l LEVEL\fR] [\fI-u USER\fR] [\fI-r ROLE\fR] \fICOMMAND\fR [\fIARGS...\fR]
+.PP
+or
+.PP
+.B runcon
+\fICONTEXT\fR \fICOMMAND\fR [\fIargs...\fR]
+.PP
+.br
+.SH DESCRIPTION
+.PP
+.\" Add any additional description here
+.PP
+Run COMMAND with current security context modified by one or more of LEVEL,
+ROLE, TYPE, and USER, or with completely-specified CONTEXT.
+.TP
+\fB\-t\fR
+change current type to the specified type
+.TP
+\fB\-l\fR
+change current level range to the specified range
+.TP
+\fB\-r\fR
+change current role to the specified role
+.TP
+\fB\-u\fR
+change current user to the specified user
+.PP
+If none of \fI-t\fR, \fI-u\fR, \fI-r\fR, or \fI-l\fR, is specified,
+the first argument is used as the complete context.  Any additional
+arguments after \fICOMMAND\fR are interpreted as arguments to the
+command.
+.PP
+Note that only carefully-chosen contexts are likely to successfully
+run.
diff -urN coreutils-5.2.1.orig/man/runcon.x coreutils-5.2.1/man/runcon.x
--- coreutils-5.2.1.orig/man/runcon.x	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/man/runcon.x	2004-06-17 13:42:51.942674264 -0500
@@ -0,0 +1,2 @@
+[DESCRIPTION]
+.\" Add any additional description here
diff -urN coreutils-5.2.1.orig/man/stat.1 coreutils-5.2.1/man/stat.1
--- coreutils-5.2.1.orig/man/stat.1	2004-03-02 16:52:31.000000000 -0600
+++ coreutils-5.2.1/man/stat.1	2004-06-17 13:42:51.953673231 -0500
@@ -22,6 +22,9 @@
 \fB\-t\fR, \fB\-\-terse\fR
 print the information in terse form
 .TP
+\fB\-s\fR, \fB\-\-secure\fR
+print security context information for SELinux if available.
+.TP
 \fB\-\-help\fR
 display this help and exit
 .TP
@@ -42,6 +45,9 @@
 %b
 Number of blocks allocated (see %B)
 .TP
+%C
+SELinux security context
+.TP
 %D
 Device number in hex
 .TP
diff -urN coreutils-5.2.1.orig/man/vdir.1 coreutils-5.2.1/man/vdir.1
--- coreutils-5.2.1.orig/man/vdir.1	2004-03-02 16:52:33.000000000 -0600
+++ coreutils-5.2.1/man/vdir.1	2004-06-17 13:42:51.955673044 -0500
@@ -202,6 +202,20 @@
 \fB\-\-version\fR
 output version information and exit
 .PP
+SELinux options:
+.TP
+\fB\-\-lcontext\fR
+Display security context.   Enable \fB\-l\fR. Lines
+will probably be too wide for most displays.
+.TP
+\fB\-\-context\fR
+Display security context so it fits on most
+displays.  Displays only mode, user, group,
+security context and file name.
+.TP
+\fB\-\-scontext\fR
+Display only security context and file name.
+.PP
 SIZE may be (or may be an integer optionally followed by) one of following:
 kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y.
 .PP
diff -urN coreutils-5.2.1.orig/src/Makefile.am coreutils-5.2.1/src/Makefile.am
--- coreutils-5.2.1.orig/src/Makefile.am	2004-06-17 13:23:40.079686000 -0500
+++ coreutils-5.2.1/src/Makefile.am	2004-06-17 13:42:51.968671824 -0500
@@ -10,7 +10,7 @@
   nl od paste pr ptx sha1sum sort split sum tac tail tr tsort unexpand uniq wc \
   basename date dirname echo env expr factor false \
   id logname pathchk printenv printf pwd seq sleep tee \
-  test true tty whoami yes \
+  test true tty whoami yes chcon runcon \
   $(OPTIONAL_BIN_PROGS) $(DF_PROG)
 
 noinst_PROGRAMS = setuidgid
@@ -23,14 +23,14 @@
   wheel-gen.pl extract-magic
 CLEANFILES = $(SCRIPTS)
 
-AM_CPPFLAGS = -I.. -I$(srcdir) -I$(top_srcdir)/lib -I../lib
+AM_CPPFLAGS = -I.. -I$(srcdir) -I$(top_srcdir)/lib -I../lib -DWITH_SELINUX
 
 # Sometimes, the expansion of $(LIBINTL) includes -lc which may
 # include modules defining variables like `optind', so libfetish.a
 # must precede $(LIBINTL) in order to ensure we use GNU getopt.
 # But libfetish.a must also follow $(LIBINTL), since libintl uses
 # replacement functions defined in libfetish.a.
-LDADD = ../lib/libfetish.a $(LIBINTL) ../lib/libfetish.a
+LDADD = ../lib/libfetish.a $(LIBINTL) ../lib/libfetish.a -lselinux
 
 dir_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME) -lncurses
 ls_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME) -lncurses
diff -urN coreutils-5.2.1.orig/src/Makefile.in coreutils-5.2.1/src/Makefile.in
--- coreutils-5.2.1.orig/src/Makefile.in	2004-06-17 13:22:52.795083000 -0500
+++ coreutils-5.2.1/src/Makefile.in	2004-06-17 13:51:29.799575346 -0500
@@ -16,7 +16,7 @@
 
 
 
-SOURCES = $(__SOURCES) basename.c cat.c $(chgrp_SOURCES) chmod.c $(chown_SOURCES) chroot.c cksum.c comm.c $(cp_SOURCES) csplit.c cut.c date.c dd.c df.c $(dir_SOURCES) dircolors.c dirname.c du.c echo.c env.c expand.c expr.c factor.c false.c fmt.c fold.c $(ginstall_SOURCES) head.c hostid.c id.c join.c link.c ln.c logname.c $(ls_SOURCES) $(md5sum_SOURCES) mkdir.c mkfifo.c mknod.c $(mv_SOURCES) nice.c nl.c nohup.c od.c paste.c pathchk.c pinky.c pr.c printenv.c printf.c ptx.c pwd.c readlink.c $(rm_SOURCES) rmdir.c seq.c setuidgid.c $(sha1sum_SOURCES) shred.c sleep.c sort.c split.c stat.c stty.c sum.c sync.c tac.c tail.c tee.c test.c touch.c tr.c true.c tsort.c tty.c uname.c unexpand.c uniq.c unlink.c users.c $(vdir_SOURCES) wc.c who.c whoami.c yes.c
+SOURCES = $(__SOURCES) basename.c cat.c $(chgrp_SOURCES) chmod.c $(chown_SOURCES) chroot.c cksum.c comm.c $(cp_SOURCES) csplit.c cut.c date.c dd.c df.c $(dir_SOURCES) dircolors.c dirname.c du.c echo.c env.c expand.c expr.c factor.c false.c fmt.c fold.c $(ginstall_SOURCES) head.c hostid.c id.c join.c link.c ln.c logname.c $(ls_SOURCES) $(md5sum_SOURCES) mkdir.c mkfifo.c mknod.c $(mv_SOURCES) nice.c nl.c nohup.c od.c paste.c pathchk.c pinky.c pr.c printenv.c printf.c ptx.c pwd.c readlink.c $(rm_SOURCES) rmdir.c seq.c setuidgid.c $(sha1sum_SOURCES) shred.c sleep.c sort.c split.c stat.c stty.c sum.c sync.c tac.c tail.c tee.c test.c touch.c tr.c true.c tsort.c tty.c uname.c unexpand.c uniq.c unlink.c users.c $(vdir_SOURCES) wc.c who.c whoami.c yes.c chcon.c runcon.c
 
 srcdir = @srcdir@
 top_srcdir = @top_srcdir@
@@ -60,8 +60,8 @@
 	logname$(EXEEXT) pathchk$(EXEEXT) \
 	printenv$(EXEEXT) printf$(EXEEXT) pwd$(EXEEXT) seq$(EXEEXT) \
 	sleep$(EXEEXT) tee$(EXEEXT) test$(EXEEXT) true$(EXEEXT) \
-	tty$(EXEEXT) whoami$(EXEEXT) yes$(EXEEXT) $(am__EXEEXT_1) \
-	$(am__EXEEXT_2)
+	tty$(EXEEXT) whoami$(EXEEXT) yes$(EXEEXT) chcon$(EXEEXT) runcon$(EXEEXT) \
+	$(am__EXEEXT_1) $(am__EXEEXT_2)
 noinst_PROGRAMS = setuidgid$(EXEEXT)
 subdir = src
 DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
@@ -659,7 +659,7 @@
 	sort.c split.c stat.c stty.c sum.c sync.c tac.c tail.c \
 	tee.c test.c touch.c tr.c true.c tsort.c tty.c uname.c \
 	unexpand.c uniq.c unlink.c users.c $(vdir_SOURCES) \
-	wc.c who.c whoami.c yes.c
+	wc.c who.c whoami.c yes.c chcon.c runcon.c
 DIST_SOURCES = $(__SOURCES) basename.c cat.c $(chgrp_SOURCES) chmod.c \
 	$(chown_SOURCES) chroot.c cksum.c comm.c $(cp_SOURCES) \
 	csplit.c cut.c date.c dd.c df.c $(dir_SOURCES) dircolors.c \
@@ -673,7 +673,7 @@
 	sort.c split.c stat.c stty.c sum.c sync.c tac.c tail.c \
 	tee.c test.c touch.c tr.c true.c tsort.c tty.c uname.c \
 	unexpand.c uniq.c unlink.c users.c $(vdir_SOURCES) \
-	wc.c who.c whoami.c yes.c
+	wc.c who.c whoami.c yes.c chcon.c runcon.c
 HEADERS = $(noinst_HEADERS)
 ETAGS = etags
 CTAGS = ctags
@@ -810,14 +810,14 @@
   wheel-gen.pl extract-magic
 
 CLEANFILES = $(SCRIPTS)
-AM_CPPFLAGS = -I.. -I$(srcdir) -I$(top_srcdir)/lib -I../lib
+AM_CPPFLAGS = -I.. -I$(srcdir) -I$(top_srcdir)/lib -I../lib -DWITH_SELINUX
 
 # Sometimes, the expansion of $(LIBINTL) includes -lc which may
 # include modules defining variables like `optind', so libfetish.a
 # must precede $(LIBINTL) in order to ensure we use GNU getopt.
 # But libfetish.a must also follow $(LIBINTL), since libintl uses
 # replacement functions defined in libfetish.a.
-LDADD = ../lib/libfetish.a $(LIBINTL) ../lib/libfetish.a
+LDADD = ../lib/libfetish.a $(LIBINTL) ../lib/libfetish.a -lselinux
 dir_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME) -lncurses
 ls_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME) -lncurses
 shred_LDADD = $(LDADD) $(LIB_CLOCK_GETTIME)
@@ -982,6 +982,9 @@
 chmod$(EXEEXT): $(chmod_OBJECTS) $(chmod_DEPENDENCIES) 
 	@rm -f chmod$(EXEEXT)
 	$(LINK) $(chmod_LDFLAGS) $(chmod_OBJECTS) $(chmod_LDADD) $(LIBS)
+chcon$(EXEEXT): $(chcon_OBJECTS) $(chcon_DEPENDENCIES) 
+	@rm -f chcon$(EXEEXT)
+	$(LINK) $(chcon_LDFLAGS) $(chcon_OBJECTS) $(chcon_LDADD) $(LIBS)
 chown$(EXEEXT): $(chown_OBJECTS) $(chown_DEPENDENCIES) 
 	@rm -f chown$(EXEEXT)
 	$(LINK) $(chown_LDFLAGS) $(chown_OBJECTS) $(chown_LDADD) $(LIBS)
@@ -1135,6 +1138,9 @@
 rmdir$(EXEEXT): $(rmdir_OBJECTS) $(rmdir_DEPENDENCIES) 
 	@rm -f rmdir$(EXEEXT)
 	$(LINK) $(rmdir_LDFLAGS) $(rmdir_OBJECTS) $(rmdir_LDADD) $(LIBS)
+runcon$(EXEEXT): $(runcon_OBJECTS) $(runcon_DEPENDENCIES) 
+	@rm -f runcon$(EXEEXT)
+	$(LINK) $(runcon_LDFLAGS) $(runcon_OBJECTS) $(runcon_LDADD) $(LIBS)
 seq$(EXEEXT): $(seq_OBJECTS) $(seq_DEPENDENCIES) 
 	@rm -f seq$(EXEEXT)
 	$(LINK) $(seq_LDFLAGS) $(seq_OBJECTS) $(seq_LDADD) $(LIBS)
diff -urN coreutils-5.2.1.orig/src/chcon.c coreutils-5.2.1/src/chcon.c
--- coreutils-5.2.1.orig/src/chcon.c	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/src/chcon.c	2004-06-17 13:42:52.010667882 -0500
@@ -0,0 +1,321 @@
+/* chcontext -- change security context of a pathname */
+
+#include <config.h>
+#include <stdio.h>
+#include <sys/types.h>
+#include <grp.h>
+#include <getopt.h>
+#include <selinux/selinux.h>
+
+#include "system.h"
+#include "error.h"
+#include "savedir.h"
+#include "group-member.h"
+
+enum Change_status
+{
+  CH_SUCCEEDED,
+  CH_FAILED,
+  CH_NO_CHANGE_REQUESTED
+};
+
+enum Verbosity
+{
+  /* Print a message for each file that is processed.  */
+  V_high,
+
+  /* Print a message for each file whose attributes we change.  */
+  V_changes_only,
+
+  /* Do not be verbose.  This is the default. */
+  V_off
+};
+
+static int change_dir_context (const char *dir, security_context_t context,
+				       const struct stat *statp);
+
+/* The name the program was run with. */
+char *program_name;
+
+/* If nonzero, and the systems has support for it, change the context
+   of symbolic links rather than any files they point to.  */
+static int change_symlinks;
+
+/* If nonzero, change the context of directories recursively. */
+static int recurse;
+
+/* If nonzero, force silence (no error messages). */
+static int force_silent;
+
+/* Level of verbosity.  */
+static enum Verbosity verbosity = V_off;
+
+/* The name of the context file is being given. */
+static const char *contextname;
+
+/* The argument to the --reference option.  Use the context of this file.
+   This file must exist.  */
+static char *reference_file;
+
+/* If nonzero, display usage information and exit.  */
+static int show_help;
+
+/* If nonzero, print the version on standard output and exit.  */
+static int show_version;
+
+static struct option const long_options[] =
+{
+  {"recursive", no_argument, 0, 'R'},
+  {"changes", no_argument, 0, 'c'},
+  {"no-dereference", no_argument, 0, 'h'},
+  {"silent", no_argument, 0, 'f'},
+  {"quiet", no_argument, 0, 'f'},
+  {"reference", required_argument, 0, CHAR_MAX + 1},
+  {"context", required_argument, 0, CHAR_MAX + 2},
+  {"verbose", no_argument, 0, 'v'},
+  {"help", no_argument, &show_help, 1},
+  {"version", no_argument, &show_version, 1},
+  {0, 0, 0, 0}
+};
+
+/* Tell the user how/if the context of FILE has been changed.
+   CHANGED describes what (if anything) has happened. */
+
+static void
+describe_change (const char *file, enum Change_status changed)
+{
+  const char *fmt;
+  switch (changed)
+    {
+    case CH_SUCCEEDED:
+      fmt = _("context of %s changed to %s\n");
+      break;
+    case CH_FAILED:
+      fmt = _("failed to change context of %s to %s\n");
+      break;
+    case CH_NO_CHANGE_REQUESTED:
+      fmt = _("context of %s retained as %s\n");
+      break;
+    default:
+      abort ();
+    }
+  printf (fmt, file, contextname);
+}
+
+/* Change the context of FILE to CONTEXT.
+   If it is a directory and -R is given, recurse.
+   Return 0 if successful, 1 if errors occurred. */
+
+static int
+change_file_context (const char *file, security_context_t context)
+{
+  struct stat file_stats;
+  security_context_t file_context=NULL;
+  int errors = 0;
+
+  if ((lgetfilecon(file, &file_context)<0) && (errno != ENODATA))
+
+    {
+      if (force_silent == 0)
+	error (0, errno, "%s", file);
+      return 1;
+    }
+
+  if ((file_context==NULL) || strcmp(context,file_context)!=0)
+    {
+      int fail;
+
+      if (change_symlinks)
+      	fail = lsetfilecon (file, context);
+      else
+      	fail = setfilecon (file, context);
+
+      if (verbosity == V_high || (verbosity == V_changes_only && !fail))
+	describe_change (file, (fail ? CH_FAILED : CH_SUCCEEDED));
+
+      if (fail)
+	{
+	  errors = 1;
+	  if (force_silent == 0)
+	    {
+	      error (0, errno, "%s", file);
+	    }
+	}
+    }
+  else if (verbosity == V_high)
+    {
+      describe_change (file, CH_NO_CHANGE_REQUESTED);
+    }
+
+  freecon(file_context);
+
+  if (recurse) {
+    if (lstat(file, &file_stats)==0)
+      if (S_ISDIR (file_stats.st_mode))
+		 errors |= change_dir_context (file, context, &file_stats);
+  }
+  return errors;
+}
+
+/* Recursively change context of the files in directory DIR
+   to CONTEXT CONTEXT.
+   STATP points to the results of lstat on DIR.
+   Return 0 if successful, 1 if errors occurred. */
+
+static int
+change_dir_context (const char *dir, security_context_t context, const struct stat *statp)
+{
+  char *name_space, *namep;
+  char *path;			/* Full path of each entry to process. */
+  unsigned dirlength;		/* Length of `dir' and '\0'. */
+  unsigned filelength;		/* Length of each pathname to process. */
+  unsigned pathlength;		/* Bytes allocated for `path'. */
+  int errors = 0;
+
+  errno = 0;
+  name_space = savedir (dir);
+  if (name_space == NULL)
+    {
+      if (errno)
+        {
+	  if (force_silent == 0)
+	    error (0, errno, "%s", dir);
+	  return 1;
+	}
+      else
+	error (1, 0, _("virtual memory exhausted"));
+    }
+
+  dirlength = strlen (dir) + 1;	/* + 1 is for the trailing '/'. */
+  pathlength = dirlength + 1;
+  /* Give `path' a dummy value; it will be reallocated before first use. */
+  path = xmalloc (pathlength);
+  strcpy (path, dir);
+  path[dirlength - 1] = '/';
+
+  for (namep = name_space; *namep; namep += filelength - dirlength)
+    {
+      filelength = dirlength + strlen (namep) + 1;
+      if (filelength > pathlength)
+	{
+	  pathlength = filelength * 2;
+	  path = xrealloc (path, pathlength);
+	}
+      strcpy (path + dirlength, namep);
+      errors |= change_file_context (path, context);
+    }
+  free (path);
+  free (name_space);
+  return errors;
+}
+
+static void
+usage (int status)
+{
+  if (status != 0)
+    fprintf (stderr, _("Try `%s --help' for more information.\n"),
+	     program_name);
+  else
+    {
+      printf (_("\
+Usage: %s [OPTION]... CONTEXT FILE...\n\
+  or:  %s [OPTION]... --reference=RFILE FILE...\n\
+"),
+	program_name, program_name, program_name);
+      printf (_("\
+Change the security context of each FILE to CONTEXT.\n\
+\n\
+  -c, --changes          like verbose but report only when a change is made\n\
+  -h, --no-dereference   affect symbolic links instead of any referenced file\n\
+                         (available only on systems with lchown system call)\n\
+  -f, --silent, --quiet  suppress most error messages\n\
+      --reference=RFILE  use RFILE's group instead of using a CONTEXT value\n\
+  -R, --recursive        change files and directories recursively\n\
+  -v, --verbose          output a diagnostic for every file processed\n\
+      --help             display this help and exit\n\
+      --version          output version information and exit\n\
+"));
+      close_stdout ();
+    }
+  exit (status);
+}
+
+int
+main (int argc, char **argv)
+{
+  security_context_t context = NULL;
+  security_context_t ref_context = NULL;
+  int errors = 0;
+  int optc;
+  
+  program_name = argv[0];
+  setlocale (LC_ALL, "");
+  bindtextdomain (PACKAGE, LOCALEDIR);
+  textdomain (PACKAGE);
+
+  recurse = force_silent = 0;
+  
+  while ((optc = getopt_long (argc, argv, "Rcfhv", long_options, NULL)) != -1)
+  {
+	  switch (optc)
+	  {
+	  case 0:
+		  break;
+	  case CHAR_MAX + 1:
+		  reference_file = optarg;
+		  break;
+	  case 'R':
+		  recurse = 1;
+		  break;
+ 	  case 'c':
+		  verbosity = V_changes_only;
+		  break;
+	  case 'f':
+		  force_silent = 1;
+		  break;
+	  case 'h':
+		  change_symlinks = 1;
+		  break;
+	  case 'v':
+		  verbosity = V_high;
+		  break;
+	  default:
+		  usage (1);
+	  }
+  }
+
+  if (show_version)
+  {
+     printf ("chcon (%s) %s\n", GNU_PACKAGE, VERSION);
+     close_stdout ();
+     exit (0);
+  }
+
+  if (show_help)
+    usage (0);
+
+  if (argc - optind + ( (reference_file || ( context > 0 ) ) ? 1 : 0) <= 1)
+  {
+     error (0, 0, _("too few arguments"));
+     usage (1);
+  }
+  
+  if (reference_file)
+    {
+      if (getfilecon (reference_file, &ref_context)<0)
+	error (1, errno, "%s", reference_file);
+
+      context = ref_context;
+    }
+  else {
+     context = argv[optind++];
+  }
+  for (; optind < argc; ++optind)
+     errors |= change_file_context (argv[optind], context);
+
+  if (verbosity != V_off)
+    close_stdout ();
+  if (ref_context != NULL)
+    freecon(ref_context);
+  exit (errors);
+}
diff -urN coreutils-5.2.1.orig/src/copy.c coreutils-5.2.1/src/copy.c
--- coreutils-5.2.1.orig/src/copy.c	2004-06-17 13:23:40.174677000 -0500
+++ coreutils-5.2.1/src/copy.c	2004-06-17 13:42:52.058663377 -0500
@@ -49,6 +49,10 @@
 #include "xreadlink.h"
 #include "xstrtol.h"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>          /* for is_selinux_enabled() */
+#endif
+
 #define DO_CHOWN(Chown, File, New_uid, New_gid)				\
   (Chown (File, New_uid, New_gid)					\
    /* If non-root uses -p, it's ok if we can't preserve ownership.	\
@@ -1504,6 +1508,26 @@
      In such cases, set this variable to zero.  */
   preserve_metadata = 1;
 
+#ifdef WITH_SELINUX
+  if (x->preserve_security_context) 
+    {
+      security_context_t con;
+
+      if (lgetfilecon (src_path, &con) < 0)
+	{
+	  error (0, errno, _("cannot lgetfilecon %s"), quote (src_path));
+	  return 1;
+	}
+      if (setfscreatecon(con) < 0) 
+	{
+	  freecon(con);
+	  error (0, errno, _("cannot set setfscreatecon %s"), quote (con));
+	  return 1;
+      }
+      freecon(con);
+  }
+#endif
+
   if (S_ISDIR (src_type))
     {
       struct dir_list *dir;
@@ -1551,8 +1575,13 @@
 	}
 
       /* Are we crossing a file system boundary?  */
-      if (x->one_file_system && device != 0 && device != src_sb.st_dev)
+      if (x->one_file_system && device != 0 && device != src_sb.st_dev) {
+#ifdef WITH_SELINUX
+	if (x->preserve_security_context) 
+	  setfscreatecon(NULL);
+#endif
 	return 0;
+      }
 
       /* Copy the contents of the directory.  */
 
@@ -1686,6 +1715,11 @@
 	    }
 	}
 
+#ifdef WITH_SELINUX
+      if (x->preserve_security_context) 
+	setfscreatecon(NULL);
+#endif
+
       /* There's no need to preserve timestamps or permissions.  */
       preserve_metadata = 0;
 
@@ -1718,7 +1752,7 @@
   if (command_line_arg)
     record_file (x->dest_info, dst_path, NULL);
 
-  if ( ! preserve_metadata)
+  if ( ! preserve_metadata) 
     return 0;
 
   /* POSIX says that `cp -p' must restore the following:
@@ -1803,6 +1837,11 @@
 
 un_backup:
 
+#ifdef WITH_SELINUX
+  if (x->preserve_security_context) 
+    setfscreatecon(NULL);
+#endif
+
   /* We have failed to create the destination file.
      If we've just added a dev/ino entry via the remember_copied
      call above (i.e., unless we've just failed to create a hard link),
diff -urN coreutils-5.2.1.orig/src/copy.h coreutils-5.2.1/src/copy.h
--- coreutils-5.2.1.orig/src/copy.h	2004-06-17 13:23:40.254669000 -0500
+++ coreutils-5.2.1/src/copy.h	2004-06-17 13:42:52.071662156 -0500
@@ -105,6 +105,9 @@
   int preserve_ownership;
   int preserve_mode;
   int preserve_timestamps;
+#ifdef WITH_SELINUX
+  int preserve_security_context;
+#endif
 
   /* Enabled for mv, and for cp by the --preserve=links option.
      If nonzero, attempt to preserve in the destination files any
diff -urN coreutils-5.2.1.orig/src/cp.c coreutils-5.2.1/src/cp.c
--- coreutils-5.2.1.orig/src/cp.c	2004-06-17 13:23:40.296666000 -0500
+++ coreutils-5.2.1/src/cp.c	2004-06-17 13:42:52.088660561 -0500
@@ -49,6 +49,10 @@
 
 #define AUTHORS "Torbjorn Granlund", "David MacKenzie", "Jim Meyering"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>          /* for is_selinux_enabled() */
+#endif
+
 #ifndef _POSIX_VERSION
 uid_t geteuid ();
 #endif
@@ -151,6 +155,9 @@
   {"update", no_argument, NULL, 'u'},
   {"verbose", no_argument, NULL, 'v'},
   {"version-control", required_argument, NULL, 'V'}, /* Deprecated. FIXME. */
+#ifdef WITH_SELINUX
+  {"context", required_argument, NULL, 'X'},
+#endif
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
   {NULL, 0, NULL, 0}
@@ -202,6 +209,9 @@
                                  additional attributes: links, all\n\
 "), stdout);
       fputs (_("\
+  -c                           same as --preserve=context\n\
+"), stdout);
+      fputs (_("\
       --no-preserve=ATTR_LIST  don't preserve the specified attributes\n\
       --parents                append source path to DIRECTORY\n\
   -P                           same as `--no-dereference'\n\
@@ -229,6 +239,7 @@
                                  destination file is missing\n\
   -v, --verbose                explain what is being done\n\
   -x, --one-file-system        stay on this file system\n\
+  -X, --context=CONTEXT        set security context of copy to CONTEXT\n\
 "), stdout);
       fputs (HELP_OPTION_DESCRIPTION, stdout);
       fputs (VERSION_OPTION_DESCRIPTION, stdout);
@@ -707,8 +718,8 @@
 	{
 	  new_dest = (char *) dest;
 	}
-
-      return copy (source, new_dest, new_dst, x, &unused, NULL);
+      ret=copy (source, new_dest, new_dst, x, &unused, NULL);
+      return ret;
     }
 
   /* unreachable */
@@ -732,6 +743,10 @@
   x->preserve_mode = 0;
   x->preserve_timestamps = 0;
 
+#ifdef WITH_SELINUX
+  x->preserve_security_context = 0;
+#endif
+
   x->require_preserve = 0;
   x->recursive = 0;
   x->sparse_mode = SPARSE_AUTO;
@@ -770,19 +785,20 @@
       PRESERVE_TIMESTAMPS,
       PRESERVE_OWNERSHIP,
       PRESERVE_LINK,
+      PRESERVE_CONTEXT,
       PRESERVE_ALL
     };
   static enum File_attribute const preserve_vals[] =
     {
       PRESERVE_MODE, PRESERVE_TIMESTAMPS,
-      PRESERVE_OWNERSHIP, PRESERVE_LINK, PRESERVE_ALL
+      PRESERVE_OWNERSHIP, PRESERVE_LINK, PRESERVE_CONTEXT, PRESERVE_ALL
     };
 
   /* Valid arguments to the `--preserve' option. */
   static char const* const preserve_args[] =
     {
       "mode", "timestamps",
-      "ownership", "links", "all", 0
+      "ownership", "links", "context", "all", 0
     };
 
   char *arg_writable = xstrdup (arg);
@@ -817,11 +833,16 @@
 	  x->preserve_links = on_off;
 	  break;
 
+	case PRESERVE_CONTEXT:
+	  x->preserve_security_context = on_off;
+	  break;
+
 	case PRESERVE_ALL:
 	  x->preserve_mode = on_off;
 	  x->preserve_timestamps = on_off;
 	  x->preserve_ownership = on_off;
 	  x->preserve_links = on_off;
+	  x->preserve_security_context = on_off;
 	  break;
 
 	default:
@@ -845,6 +866,10 @@
   struct cp_options x;
   int copy_contents = 0;
   char *target_directory = NULL;
+#ifdef WITH_SELINUX
+  security_context_t scontext = NULL;
+  int is_selinux_enabled_flag= is_selinux_enabled();
+#endif
 
   initialize_main (&argc, &argv);
   program_name = argv[0];
@@ -860,7 +885,11 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
+#ifdef WITH_SELINUX
+  while ((c = getopt_long (argc, argv, "abcdfgHilLprsuvxPRS:V:X:Z:", long_opts, NULL))
+#else
   while ((c = getopt_long (argc, argv, "abdfgHilLprsuvxPRS:V:", long_opts, NULL))
+#endif
 	 != -1)
     {
       switch (c)
@@ -956,6 +985,36 @@
 	  x.preserve_timestamps = 1;
 	  x.require_preserve = 1;
 	  break;
+#ifdef WITH_SELINUX
+	case 'c':
+	  if ( scontext != NULL ) { 
+	      (void) fprintf(stderr, "%s: cannot force target context <-- %s and preserve it\n", argv[0], scontext);
+	    exit( 1 );
+	  }
+	  else if (is_selinux_enabled_flag) 
+	    x.preserve_security_context = 1;
+	  break;
+
+	case 'X':
+	  /* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled_flag ) {
+	    fprintf( stderr, "Warning:  ignoring --context (-X). "
+		             "It requires a SELinux enabled kernel.\n" );
+	    break;
+	  }
+	  if ( x.preserve_security_context ) {
+	    (void) fprintf(stderr, "%s: cannot force target context to '%s' and preserve it\n", argv[0], optarg);
+	    exit( 1 );
+	  }
+	  scontext = optarg;
+	  /* if there's a security_context given set new path 
+	     components to that context, too */
+	  if ( setfscreatecon(scontext) < 0 ) {
+	    (void) fprintf(stderr, _("cannot set default security context %s"), scontext);
+	    exit( 1 );
+	  }
+	  break;
+#endif
 
 	case PARENTS_OPTION:
 	  flag_path = 1;
diff -urN coreutils-5.2.1.orig/src/id.c coreutils-5.2.1/src/id.c
--- coreutils-5.2.1.orig/src/id.c	2004-06-17 13:23:40.304665000 -0500
+++ coreutils-5.2.1/src/id.c	2004-06-17 13:42:52.092660186 -0500
@@ -45,6 +45,20 @@
 
 int getugroups ();
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+static void print_context (char* context);
+/* Print the SELinux context */
+static void
+print_context(char *context)
+{
+  printf ("%s", context);
+}
+
+/* If nonzero, output only the SELinux context. -c */
+static int just_context = 0;
+
+#endif
 static void print_user (uid_t uid);
 static void print_group (gid_t gid);
 static void print_group_list (const char *username);
@@ -63,8 +77,14 @@
 /* Nonzero if errors have been encountered.  */
 static int problems = 0;
 
+/* The SELinux context */
+/* Set `context' to a known invalid value so print_full_info() will *
+ * know when `context' has not been set to a meaningful value.      */
+static security_context_t context=NULL;
+
 static struct option const longopts[] =
 {
+  {"context", no_argument, NULL, 'c'},
   {"group", no_argument, NULL, 'g'},
   {"groups", no_argument, NULL, 'G'},
   {"name", no_argument, NULL, 'n'},
@@ -88,6 +108,7 @@
 Print information for USERNAME, or the current user.\n\
 \n\
   -a              ignore, for compatibility with other versions\n\
+  -c, --context   print only the context\n\
   -g, --group     print only the effective group ID\n\
   -G, --groups    print all group IDs\n\
   -n, --name      print a name instead of a number, for -ugG\n\
@@ -109,6 +130,7 @@
 main (int argc, char **argv)
 {
   int optc;
+  int is_selinux_enabled_flag=is_selinux_enabled();
 
   /* If nonzero, output the list of all group IDs. -G */
   int just_group_list = 0;
@@ -127,7 +149,7 @@
 
   atexit (close_stdout);
 
-  while ((optc = getopt_long (argc, argv, "agnruG", longopts, NULL)) != -1)
+  while ((optc = getopt_long (argc, argv, "acgnrsuG", longopts, NULL)) != -1)
     {
       switch (optc)
 	{
@@ -136,6 +158,17 @@
 	case 'a':
 	  /* Ignore -a, for compatibility with SVR4.  */
 	  break;
+#ifdef WITH_SELINUX
+        case 'c':
+	  /* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled_flag ) {
+	    fprintf( stderr, "Sorry, --context (-c) can be used only on "
+		             "a selinux-enabled kernel.\n" );
+	    exit( 1 );
+	  }
+          just_context = 1;
+          break;
+#endif
 	case 'g':
 	  just_group = 1;
 	  break;
@@ -158,8 +191,28 @@
 	}
     }
 
-  if (just_user + just_group + just_group_list > 1)
-    error (EXIT_FAILURE, 0, _("cannot print only user and only group"));
+#ifdef WITH_SELINUX
+  if (argc - optind == 1)
+    is_selinux_enabled_flag = 0;
+
+  if( just_context  && !is_selinux_enabled_flag)
+    error (1, 0, _("\
+cannot display context when selinux not enabled or when displaying the id\n\
+of a different user"));
+
+  /* If we are on a selinux-enabled kernel, get our context.    *
+   * Otherwise, leave the context variable alone - it has *
+   * been initialized known invalid value; if we see this invalid   *
+   * value later, we will know we are on a non-selinux kernel.         */
+  if( is_selinux_enabled_flag )
+    {
+      if (getcon(&context))
+        error (1, 0, "can't get process context");
+    }
+#endif
+
+  if (just_user + just_group + just_group_list + just_context > 1)
+    error (EXIT_FAILURE, 0, _("cannot print \"only\" of more than one choice"));
 
   if (just_user + just_group + just_group_list == 0 && (use_real || use_name))
     error (EXIT_FAILURE, 0,
@@ -190,6 +243,10 @@
     print_group (use_real ? rgid : egid);
   else if (just_group_list)
     print_group_list (argv[optind]);
+#ifdef WITH_SELINUX
+  else if (just_context)
+    print_context (context);
+#endif
   else
     print_full_info (argv[optind]);
   putchar ('\n');
@@ -397,4 +454,9 @@
     free (groups);
   }
 #endif /* HAVE_GETGROUPS */
+#ifdef WITH_SELINUX
+  if ( context != NULL ) {
+    printf(" context=%s",context);
+  }
+#endif
 }
diff -urN coreutils-5.2.1.orig/src/install.c coreutils-5.2.1/src/install.c
--- coreutils-5.2.1.orig/src/install.c	2004-06-17 13:23:40.411655000 -0500
+++ coreutils-5.2.1/src/install.c	2004-06-17 13:42:52.096659810 -0500
@@ -46,6 +46,10 @@
 # include <sys/wait.h>
 #endif
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>          /* for is_selinux_enabled() */
+#endif
+
 struct passwd *getpwnam ();
 struct group *getgrnam ();
 
@@ -119,11 +123,17 @@
 static struct option const long_options[] =
 {
   {"backup", optional_argument, NULL, 'b'},
+#ifdef WITH_SELINUX
+  {"context", required_argument, NULL, 'X'},
+#endif
   {"directory", no_argument, NULL, 'd'},
   {"group", required_argument, NULL, 'g'},
   {"mode", required_argument, NULL, 'm'},
   {"owner", required_argument, NULL, 'o'},
   {"preserve-timestamps", no_argument, NULL, 'p'},
+#ifdef WITH_SELINUX
+  {"preserve_context", no_argument, NULL, 'P'},
+#endif
   {"strip", no_argument, NULL, 's'},
   {"suffix", required_argument, NULL, 'S'},
   {"version-control", required_argument, NULL, 'V'}, /* Deprecated. FIXME. */
@@ -165,6 +175,9 @@
   x->umask_kill = 0;
   x->update = 0;
   x->verbose = 0;
+#ifdef WITH_SELINUX
+  x->preserve_security_context = 0;
+#endif
   x->dest_info = NULL;
   x->src_info = NULL;
 }
@@ -182,6 +195,11 @@
   struct cp_options x;
   int n_files;
   char **file;
+#ifdef WITH_SELINUX
+  security_context_t scontext = NULL;
+ /* set iff kernel has extra selinux system calls */
+  int is_selinux_enabled_flag = is_selinux_enabled();
+#endif
 
   initialize_main (&argc, &argv);
   program_name = argv[0];
@@ -203,7 +221,11 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
+#ifdef WITH_SELINUX
+  while ((optc = getopt_long (argc, argv, "bcsDdg:m:o:pPX:vV:S:Z:", long_options,
+#else
   while ((optc = getopt_long (argc, argv, "bcsDdg:m:o:pvV:S:", long_options,
+#endif
 			      NULL)) != -1)
     {
       switch (optc)
@@ -253,6 +275,39 @@
 	  make_backups = 1;
 	  backup_suffix_string = optarg;
 	  break;
+#ifdef WITH_SELINUX
+ 	case 'P':
+	/* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled_flag ) {
+ 	    fprintf( stderr, "Warning:  ignoring --preserve_context (-P) "
+		             "because the kernel is not selinux-enabled.\n" );
+ 	    break;
+ 	  }
+ 	  if ( scontext!=NULL ) { /* scontext could be NULL because of calloc() failure */
+ 	      (void) fprintf(stderr, "%s: cannot force target context to '%s' and preserve it\n", argv[0], scontext);
+ 	    exit( 1 );
+ 	  }
+ 	  x.preserve_security_context = 1;
+ 	  break ;
+ 	case 'X':
+ 	  /* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled_flag ) {
+ 	    fprintf( stderr, "Warning:  ignoring --context (-X) "
+ 		             "because the kernel is not selinux-enabled.\n" );
+ 	    break;
+ 	  }
+ 	  if ( x.preserve_security_context ) {
+
+	     	    (void) fprintf(stderr, "%s: cannot force target context == '%s' and preserve it\n", argv[0], optarg);
+ 	    exit( 1 );
+ 	  }
+ 	  scontext = optarg;
+	  if (setfscreatecon(scontext)) {
+ 	    (void) fprintf(stderr, "%s: cannot setup default context == '%s'\n", argv[0], scontext);
+	    exit(1);
+	  }
+ 	  break;
+#endif
 	case_GETOPT_HELP_CHAR;
 	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 	default:
@@ -625,6 +680,11 @@
   -S, --suffix=SUFFIX override the usual backup suffix\n\
   -v, --verbose       print the name of each directory as it is created\n\
 "), stdout);
+      fputs (_("\
+  -P, --preserve_context (Selinux) Preserve security context\n\
+  -X, --context=CONTEXT  (Selinux) Set security context of files and directories\n\
+"), stdout);
+
       fputs (HELP_OPTION_DESCRIPTION, stdout);
       fputs (VERSION_OPTION_DESCRIPTION, stdout);
       fputs (_("\
diff -urN coreutils-5.2.1.orig/src/ls.c coreutils-5.2.1/src/ls.c
--- coreutils-5.2.1.orig/src/ls.c	2004-06-17 13:23:40.470649000 -0500
+++ coreutils-5.2.1/src/ls.c	2004-06-17 13:42:52.115658027 -0500
@@ -123,6 +123,18 @@
 
 #define AUTHORS "Richard Stallman", "David MacKenzie"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+int is_selinux_enabled_flag= 0;
+static int print_scontext       = 0;
+
+#define check_selinux() if (!is_selinux_enabled_flag) { \
+	    fprintf( stderr, "Sorry, this option can only be used " \
+		             "on a SELinux kernel.\n" ); \
+	    exit( EXIT_FAILURE ); \
+}
+#endif
+
 #define obstack_chunk_alloc malloc
 #define obstack_chunk_free free
 
@@ -194,6 +206,10 @@
     /* For long listings, true if the file has an access control list.  */
     bool have_acl;
 #endif
+
+#ifdef WITH_SELINUX
+    security_context_t scontext;
+#endif
   };
 
 #if HAVE_ACL
@@ -258,6 +274,9 @@
 static void sort_files (void);
 static void parse_ls_color (void);
 void usage (int status);
+#ifdef WITH_SELINUX
+static void print_scontext_format (const struct fileinfo *f);
+#endif
 
 /* The name the program was run with, stripped of any leading path. */
 char *program_name;
@@ -356,7 +375,12 @@
     one_per_line,		/* -1 */
     many_per_line,		/* -C */
     horizontal,			/* -x */
-    with_commas			/* -m */
+#ifdef WITH_SELINUX
+    with_commas,		/* -m */
+    security_format
+#else
+    with_commas		        /* -m */
+#endif
   };
 
 static enum format format;
@@ -681,6 +705,11 @@
   SHOW_CONTROL_CHARS_OPTION,
   SI_OPTION,
   SORT_OPTION,
+#ifdef WITH_SELINUX
+  CONTEXT_OPTION,
+  LCONTEXT_OPTION,
+  SCONTEXT_OPTION,
+#endif
   TIME_OPTION,
   TIME_STYLE_OPTION
 };
@@ -724,6 +753,11 @@
   {"time-style", required_argument, 0, TIME_STYLE_OPTION},
   {"color", optional_argument, 0, COLOR_OPTION},
   {"block-size", required_argument, 0, BLOCK_SIZE_OPTION},
+#ifdef WITH_SELINUX
+  {"context", no_argument, 0, CONTEXT_OPTION},
+  {"lcontext", no_argument, 0, LCONTEXT_OPTION},
+  {"scontext", no_argument, 0, SCONTEXT_OPTION},
+#endif
   {"author", no_argument, 0, AUTHOR_OPTION},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
@@ -733,12 +767,19 @@
 static char const *const format_args[] =
 {
   "verbose", "long", "commas", "horizontal", "across",
-  "vertical", "single-column", 0
+  "vertical", "single-column", 
+#ifdef WITH_SELINUX
+  "context",
+#endif
+  0
 };
 
 static enum format const format_types[] =
 {
   long_format, long_format, with_commas, horizontal, horizontal,
+#ifdef WITH_SELINUX
+  security_format,
+#endif
   many_per_line, one_per_line
 };
 
@@ -1123,6 +1164,9 @@
 
   format_needs_stat = sort_type == sort_time || sort_type == sort_size
     || format == long_format
+#ifdef WITH_SELINUX
+    || format == security_format || print_scontext
+#endif
     || dereference == DEREF_ALWAYS
     || print_block_size || print_inode;
   format_needs_type = (format_needs_stat == 0
@@ -1245,6 +1289,11 @@
   /* Record whether there is an option specifying sort type.  */
   int sort_type_specified = 0;
 
+#ifdef WITH_SELINUX
+  /* 1 iff kernel has new selinux system calls */
+  is_selinux_enabled_flag= is_selinux_enabled();
+#endif
+
   qmark_funny_chars = 0;
 
   /* initialize all switches to default settings */
@@ -1295,6 +1344,9 @@
   all_files = 0;
   really_all_files = 0;
   ignore_patterns = 0;
+#ifdef WITH_SELINUX
+  print_scontext       = 0;
+#endif
 
   /* FIXME: put this in a function.  */
   {
@@ -1372,7 +1424,11 @@
   }
 
   while ((c = getopt_long (argc, argv,
+#ifdef WITH_SELINUX
+			   "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UX1Z",
+#else
 			   "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UX1",
+#endif
 			   long_options, NULL)) != -1)
     {
       switch (c)
@@ -1492,6 +1548,13 @@
 	  format = horizontal;
 	  break;
 
+#ifdef WITH_SELINUX
+	case 'Z':
+	  check_selinux();
+	  print_scontext = 1;
+	  format = security_format;
+	  break;
+#endif
 	case 'A':
 	  really_all_files = 0;
 	  all_files = 1;
@@ -1661,6 +1724,24 @@
 
 	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 
+#ifdef WITH_SELINUX
+	case CONTEXT_OPTION: /* new security format */
+		check_selinux();
+		print_scontext = 1;
+		format = security_format;
+		break;
+	case LCONTEXT_OPTION: /* long format plus security context */
+		check_selinux();
+		print_scontext = 1;
+		format = long_format;
+		break;
+	case SCONTEXT_OPTION: /* short form of new security format */
+		check_selinux();
+		print_scontext = 0;
+		format = security_format;
+		break;
+#endif
+
 	default:
 	  usage (EXIT_FAILURE);
 	}
@@ -2324,6 +2405,11 @@
       free (files[i].name);
       if (files[i].linkname)
 	free (files[i].linkname);
+#ifdef WITH_SELINUX
+      if (files[i].scontext)
+	freecon (files[i].scontext);
+	files[i].scontext=NULL;
+#endif
     }
 
   files_index = 0;
@@ -2360,6 +2446,9 @@
   f->linkname = 0;
   f->linkmode = 0;
   f->linkok = 0;
+#ifdef WITH_SELINUX
+  f->scontext = NULL;
+#endif
 
   if (explicit_arg
       || format_needs_stat
@@ -2405,6 +2494,11 @@
 	    {
 	      int need_lstat;
 	      err = stat (path, &f->stat);
+#ifdef WITH_SELINUX
+	      if (err>=0) 
+		if (is_selinux_enabled_flag)
+		  getfilecon(path, &f->scontext);
+#endif
 
 	      if (dereference == DEREF_COMMAND_LINE_ARGUMENTS)
 		break;
@@ -2423,6 +2517,12 @@
 
 	default: /* DEREF_NEVER */
 	  err = lstat (path, &f->stat);
+#ifdef WITH_SELINUX
+	  if (err>=0) 
+	    if (is_selinux_enabled_flag)
+	      lgetfilecon(path, &f->scontext);
+#endif
+
 	  break;
 	}
 
@@ -2917,6 +3017,16 @@
 	  DIRED_PUTCHAR ('\n');
 	}
       break;
+
+#ifdef WITH_SELINUX
+    case security_format:
+      for (i = 0; i < files_index; i++)
+      {
+        print_scontext_format (files + i);
+        DIRED_PUTCHAR ('\n');
+      }
+      break;
+#endif
     }
 }
 
@@ -3141,6 +3251,14 @@
   }
   p += sizeof modebuf + nlink_width + 1;
 
+#ifdef WITH_SELINUX
+
+  if ( print_scontext ) {
+    sprintf (p, "%-32s ", f->scontext);
+    p += strlen (p);
+  }
+#endif
+
   DIRED_INDENT ();
 
   if (print_owner | print_group | print_author)
@@ -4061,6 +4179,16 @@
   -X                         sort alphabetically by entry extension\n\
   -1                         list one file per line\n\
 "), stdout);
+#ifdef WITH_SELINUX
+printf(_("SELINUX options:\n\n\
+      --lcontext             Display security context.   Enable -l. Lines\n\
+                               will probably be too wide for most displays.\n\
+      --context              Display security context so it fits on most\n\
+                               displays.  Displays only mode, user, group,\n\
+                               security context and file name.\n\
+      --scontext             Display only security context and file name.\n\
+"));
+#endif
       fputs (HELP_OPTION_DESCRIPTION, stdout);
       fputs (VERSION_OPTION_DESCRIPTION, stdout);
       fputs (_("\n\
@@ -4079,3 +4207,79 @@
     }
   exit (status);
 }
+
+#ifdef WITH_SELINUX
+
+static void
+print_scontext_format (const struct fileinfo *f)
+{
+  char modebuf[12];
+
+  /* 7 fields that may require LONGEST_HUMAN_READABLE bytes,
+     1 10-byte mode string,
+     9 spaces, one following each of these fields, and
+     1 trailing NUL byte.  */
+
+  char init_bigbuf[7 * LONGEST_HUMAN_READABLE + 10  + 9 + 1];
+  char *buf = init_bigbuf;
+  size_t bufsize = sizeof (init_bigbuf);
+  size_t s;
+  char *p;
+  const char *fmt;
+  char *user_name;
+  char *group_name;
+  int rv;
+  char *scontext;
+
+  p = buf;
+
+  if ( print_scontext ) { /* zero means terse listing */
+    mode_string (f->stat.st_mode, modebuf);
+    modebuf[10] = (FILE_HAS_ACL (f) ? '+' : ' ');
+    modebuf[11] = '\0';
+
+    /* print mode */
+
+    (void) sprintf (p, "%s ", modebuf);
+    p += strlen (p);
+
+    /* print standard user and group */
+
+    user_name = (numeric_ids ? NULL : getuser (f->stat.st_uid));
+    if (user_name)
+      (void) sprintf (p, "%-8.8s ", user_name);
+    else
+      (void) sprintf (p, "%-8u ", (unsigned int) f->stat.st_uid);
+    p += strlen (p);
+
+    if ( print_group ) {
+      group_name = (numeric_ids ? NULL : getgroup (f->stat.st_gid));
+      if (group_name)
+	(void) sprintf (p, "%-8.8s ", group_name);
+      else
+	(void) sprintf (p, "%-8u ", (unsigned int) f->stat.st_gid);
+      p += strlen (p);
+    }
+  }
+
+  (void) sprintf (p, "%-32s ", f->scontext);
+  p += strlen (p);
+ 
+  DIRED_INDENT ();
+  DIRED_FPUTS (buf, stdout, p - buf);
+  print_name_with_quoting (f->name, f->stat.st_mode, f->linkok, &dired_obstack);
+ 
+  if (f->filetype == symbolic_link) {
+      if (f->linkname) {
+	  DIRED_FPUTS_LITERAL (" -> ", stdout);
+	  print_name_with_quoting (f->linkname, f->linkmode, f->linkok - 1, NULL);
+	  if (indicator_style != none)
+	    print_type_indicator (f->linkmode);
+      }
+  }
+  else {
+    if (indicator_style != none)
+      print_type_indicator (f->stat.st_mode);
+  }
+}
+#endif
diff -urN coreutils-5.2.1.orig/src/mkdir.c coreutils-5.2.1/src/mkdir.c
--- coreutils-5.2.1.orig/src/mkdir.c	2004-06-17 13:23:40.473649000 -0500
+++ coreutils-5.2.1/src/mkdir.c	2004-06-17 13:42:52.118657745 -0500
@@ -34,6 +34,10 @@
 
 #define AUTHORS "David MacKenzie"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>          /* for is_selinux_enabled() */
+#endif
+
 /* The name this program was run with. */
 char *program_name;
 
@@ -42,6 +46,9 @@
 
 static struct option const longopts[] =
 {
+#ifdef WITH_SELINUX
+  {"context", required_argument, NULL, 'c'},
+#endif
   {"mode", required_argument, NULL, 'm'},
   {"parents", no_argument, NULL, 'p'},
   {"verbose", no_argument, NULL, 'v'},
@@ -63,6 +70,11 @@
 Create the DIRECTORY(ies), if they do not already exist.\n\
 \n\
 "), stdout);
+#ifdef WITH_SELINUX
+      printf (_("\
+  -c, --context=CONTEXT (Selinux) set security context to CONTEXT\n\
+"));
+#endif
       fputs (_("\
 Mandatory arguments to long options are mandatory for short options too.\n\
 "), stdout);
@@ -98,7 +110,11 @@
 
   create_parents = 0;
 
+#ifdef WITH_SELINUX
+  while ((optc = getopt_long (argc, argv, "pm:s:c:v", longopts, NULL)) != -1)
+#else
   while ((optc = getopt_long (argc, argv, "pm:v", longopts, NULL)) != -1)
+#endif
     {
       switch (optc)
 	{
@@ -113,6 +129,20 @@
 	case 'v': /* --verbose  */
 	  verbose_fmt_string = _("created directory %s");
 	  break;
+#ifdef WITH_SELINUX
+ 	case 'c':
+ 	  /* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled()) {
+ 	    fprintf( stderr, "Sorry, --context (-c) can be used only on "
+ 		             "a selinux-enabled kernel.\n" );
+ 	    exit( 1 );
+ 	  }
+	  if (setfscreatecon(optarg)) {
+ 	    fprintf( stderr, "Sorry, cannot set default context to %s.\n", optarg);
+ 	    exit( 1 );
+ 	  }
+ 	  break;
+#endif
 	case_GETOPT_HELP_CHAR;
 	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 	default:
diff -urN coreutils-5.2.1.orig/src/mkfifo.c coreutils-5.2.1/src/mkfifo.c
--- coreutils-5.2.1.orig/src/mkfifo.c	2004-06-17 13:23:40.475649000 -0500
+++ coreutils-5.2.1/src/mkfifo.c	2004-06-17 13:42:52.120657558 -0500
@@ -32,11 +32,18 @@
 
 #define AUTHORS "David MacKenzie"
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>          /* for is_selinux_enabled() */
+#endif
+
 /* The name this program was run with. */
 char *program_name;
 
 static struct option const longopts[] =
 {
+#ifdef WITH_SELINUX
+  {"context", required_argument, NULL, 'c'},
+#endif
   {"mode", required_argument, NULL, 'm'},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
@@ -57,6 +64,11 @@
 Create named pipes (FIFOs) with the given NAMEs.\n\
 \n\
 "), stdout);
+#ifdef WITH_SELINUX
+      printf (_("\
+  -c, --context=CONTEXT   set security context (quoted string)\n\
+"), stdout);
+#endif
       fputs (_("\
 Mandatory arguments to long options are mandatory for short options too.\n\
 "), stdout);
@@ -93,7 +105,11 @@
 #ifndef S_ISFIFO
   error (EXIT_FAILURE, 0, _("fifo files not supported"));
 #else
+#ifdef WITH_SELINUX
+  while ((optc = getopt_long (argc, argv, "m:c:", longopts, NULL)) != -1)
+#else
   while ((optc = getopt_long (argc, argv, "m:", longopts, NULL)) != -1)
+#endif
     {
       switch (optc)
 	{
@@ -102,6 +118,19 @@
 	case 'm':
 	  specified_mode = optarg;
 	  break;
+#ifdef WITH_SELINUX
+ 	case 'c':
+ 	  if( !is_selinux_enabled()) {
+ 	    fprintf( stderr, "Sorry, --context (-c) can be used only on "
+		             "a selinux-enabled kernel.\n" );
+ 	    exit( 1 );
+ 	  }
+	  if (setfscreatecon(optarg)) {
+ 	    fprintf( stderr, "Sorry, cannot set default context to %s.\n", optarg);
+ 	    exit( 1 );
+ 	  }
+ 	  break;
+#endif
 	case_GETOPT_HELP_CHAR;
 	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 	default:
diff -urN coreutils-5.2.1.orig/src/mknod.c coreutils-5.2.1/src/mknod.c
--- coreutils-5.2.1.orig/src/mknod.c	2004-06-17 13:23:40.477649000 -0500
+++ coreutils-5.2.1/src/mknod.c	2004-06-17 13:42:52.122657370 -0500
@@ -36,8 +36,15 @@
 /* The name this program was run with. */
 char *program_name;
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#endif
+
 static struct option const longopts[] =
 {
+#ifdef WITH_SELINUX
+  {"context", required_argument, NULL, 'c'},
+#endif
   {"mode", required_argument, NULL, 'm'},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
@@ -58,6 +65,11 @@
 Create the special file NAME of the given TYPE.\n\
 \n\
 "), stdout);
+#ifdef WITH_SELINUX
+      fputs(_("\
+  -c, --context=CONTEXT   set security context (quoted string)\n\
+"), stdout);
+#endif
       fputs (_("\
 Mandatory arguments to long options are mandatory for short options too.\n\
 "), stdout);
@@ -103,7 +115,11 @@
 
   specified_mode = NULL;
 
+#ifdef WITH_SELINUX
+  while ((optc = getopt_long (argc, argv, "m:s:c:", longopts, NULL)) != -1)
+#else
   while ((optc = getopt_long (argc, argv, "m:", longopts, NULL)) != -1)
+#endif
     {
       switch (optc)
 	{
@@ -112,6 +128,20 @@
 	case 'm':
 	  specified_mode = optarg;
 	  break;
+#ifdef WITH_SELINUX
+ 	case 'c':
+ 	  /* politely decline if we're not on a selinux-enabled kernel. */
+	  if( !is_selinux_enabled()) {
+ 	    fprintf( stderr, "Sorry, --context (-c) can be used only on "
+		             "a selinux-enabled kernel.\n" );
+ 	    exit( 1 );
+ 	  }
+	  if (setfscreatecon(optarg)) {
+ 	    fprintf( stderr, "Sorry, cannot set default context to %s.\n", optarg);
+ 	    exit( 1 );
+ 	  }
+ 	  break;
+#endif
 	case_GETOPT_HELP_CHAR;
 	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
 	default:
diff -urN coreutils-5.2.1.orig/src/mv.c coreutils-5.2.1/src/mv.c
--- coreutils-5.2.1.orig/src/mv.c	2004-06-17 13:23:40.480648000 -0500
+++ coreutils-5.2.1/src/mv.c	2004-06-17 13:42:52.124657182 -0500
@@ -33,6 +33,9 @@
 #include "path-concat.h"
 #include "quote.h"
 #include "remove.h"
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>        /* for is_selinux_enabled() */
+#endif
 
 /* The official name of this program (e.g., no `g' prefix).  */
 #define PROGRAM_NAME "mv"
@@ -149,6 +152,9 @@
 
   x->update = 0;
   x->verbose = 0;
+#ifdef WITH_SELINUX
+  x->preserve_security_context = 0;
+#endif
   x->pbar_show = 0;
   x->pbar_delay = PROGRESS_DELAY;
   x->pbar_min_est = PROGRESS_MIN_EST;
@@ -339,6 +345,10 @@
                                  (equivalent to --reply=query)\n\
 "), stdout);
       fputs (_("\
+  -c                           preserve security context when source and\n\
+                               destination are on different file systems\n\
+"), stdout);
+      fputs (_("\
       --reply={yes,no,query}   specify how to handle the prompt about an\n\
                                  existing destination file\n\
       --strip-trailing-slashes remove any trailing slashes from each SOURCE\n\
@@ -406,7 +416,11 @@
 
   errors = 0;
 
+#ifdef WITH_SELINUX
+  while ((c = getopt_long (argc, argv, "bcfgiuvS:V:", long_options, NULL)) != -1)
+#else
   while ((c = getopt_long (argc, argv, "bfgiuvS:V:", long_options, NULL)) != -1)
+#endif
     {
       switch (c)
 	{
@@ -425,6 +439,15 @@
 	  if (optarg)
 	    version_control_string = optarg;
 	  break;
+#ifdef WITH_SELINUX
+	case 'c':
+	  if (is_selinux_enabled())
+	    x.preserve_security_context = 1;
+	  else
+	    fprintf( stderr, "Warning:  ignoring -c. "
+		             "It requires a SELinux enabled kernel.\n" );
+	  break;
+#endif
 	case 'f':
 	  x.interactive = I_ALWAYS_YES;
 	  break;
diff -urN coreutils-5.2.1.orig/src/runcon.c coreutils-5.2.1/src/runcon.c
--- coreutils-5.2.1.orig/src/runcon.c	1969-12-31 18:00:00.000000000 -0600
+++ coreutils-5.2.1/src/runcon.c	2004-06-17 13:42:52.127656901 -0500
@@ -0,0 +1,169 @@
+/*
+ * runcon [ context |
+ *         ( [ -r role ] [-t type] [ -u user ] [ -l levelrange ] )
+ *         command [arg1 [arg2 ...] ]
+ *
+ * attempt to run the specified command with the specified context.
+ * 
+ * -r role  : use the current context with the specified role
+ * -t type  : use the current context with the specified type
+ * -u user  : use the current context with the specified user
+ * -l level : use the current context with the specified level range
+ *
+ * Contexts are interpreted as follows:
+ *
+ * Number of       MLS
+ * components    system?
+ *
+ *     1            -         type
+ *     2            -         role:type
+ *     3            Y         role:type:range
+ *     3            N         user:role:type
+ *     4            Y         user:role:type:range
+ *     4            N         error
+ */
+
+#include <unistd.h>
+#include <stdio.h>
+#include <getopt.h>
+#include <selinux/context.h>
+#include <selinux/selinux.h>
+#include <errno.h>
+extern int errno;
+
+/* The name the program was run with. */
+char *program_name;
+
+void
+usage(char *str)
+{
+  printf("Usage: %s [OPTION]... command [args]\n"
+         "Run a program in a different security context.\n\n"
+         "  context       Complete security context\n"
+         "  -t            type (for same role as parent)\n"
+         "  -u            user identity\n"
+         "  -r            role\n"
+         "  -l            levelrange\n"
+         "    --help      display this help and exit\n",
+         program_name);
+  exit(1);
+}
+
+int 
+main(int argc,char **argv,char **envp )
+{
+  char *role    = 0;
+  char *range   = 0;
+  char *user    = 0;
+  char *type    = 0;
+  char *context = NULL;
+  security_context_t cur_context = NULL;
+
+  context_t      con;
+
+  program_name = argv[0];
+  
+  while (1) {
+    int c;
+    int this_option_optind = optind ? optind : 1;
+    int option_index = 0;
+    static struct option long_options[] = {
+      { "role", 1, 0, 'r' },
+      { "type", 1, 0, 't' },
+      { "user", 1, 0, 'u' },
+      { "range", 1, 0, 'l' },
+      { "help", 0, 0, '?' },
+      { 0, 0, 0, 0 }
+    };
+    c = getopt_long(argc, argv, "s:r:t:u:l:?", long_options, &option_index);
+    if ( c == -1 ) {
+      break;
+    }
+    switch ( c ) {
+    case 'r':
+      if ( role ) {
+	fprintf(stderr,"multiple roles\n");
+	exit(1);
+      }
+      role = optarg;
+      break;
+    case 't':
+      if ( type ) {
+	fprintf(stderr,"multiple types\n");
+	exit(1);
+      }
+      type = optarg;
+      break;
+    case 'u':
+      if ( user ) {
+	fprintf(stderr,"multiple users\n");
+	exit(1);
+      }
+      user = optarg;
+      break;
+    case 'l':
+      if ( range ) {
+	fprintf(stderr,"multiple levelranges\n");
+	exit(1);
+      }
+      range = optarg;
+      break;
+    default:
+      fprintf(stderr,"unrecognised option %c\n",c);
+    case '?':
+      usage(0);
+      break;
+    }
+  }
+  if ( !(user || role || type || range)) {
+    if ( optind >= argc ) {
+      usage("must specify -t, -u, -l, -r, or context");
+    }
+    context = argv[optind++];
+  }
+  
+  if ( optind >= argc ) {
+    usage("no command found");
+  }
+
+  if ( context ) {
+    con = context_new(context);
+    if (!con) {
+      fprintf(stderr,"%s is not a valid context\n", context);
+      exit(1);
+    }
+  }
+  else {
+    getcon(&cur_context);
+    con = context_new(cur_context);
+    if (!con) {
+      fprintf(stderr,"%s is not a valid context\n", context);
+      exit(1);
+    }
+    if ( user ) {
+      context_user_set(con,user);
+    }
+    if ( type ) {
+      context_type_set(con,type);
+    }
+    if ( range ) {
+      context_range_set(con,range);
+    }
+    if ( role ) {
+      context_role_set(con,role);
+    }
+  }
+  
+  if (setexeccon(context_str(con))!=0) {
+    fprintf(stderr,"unable to setup security context %s\n", context_str(con));
+    exit(1);
+  }
+  if (cur_context!=NULL) 
+    freecon(cur_context);
+
+  if ( execvp(argv[optind],argv+optind) ) {
+    perror("execvp");
+    exit(1);
+  }
+  return 1; /* can't reach this statement.... */
+}
diff -urN coreutils-5.2.1.orig/src/stat.c coreutils-5.2.1/src/stat.c
--- coreutils-5.2.1.orig/src/stat.c	2004-06-17 13:23:40.486648000 -0500
+++ coreutils-5.2.1/src/stat.c	2004-06-17 13:42:52.132656431 -0500
@@ -42,6 +42,13 @@
 # endif
 #endif
 
+#ifdef WITH_SELINUX
+#include <selinux/selinux.h>
+#define SECURITY_ID_T security_context_t
+#else
+#define SECURITY_ID_T char *
+#endif
+
 #include "system.h"
 
 #include "error.h"
@@ -95,6 +102,7 @@
   {"dereference", no_argument, 0, 'L'},
   {"format", required_argument, 0, 'c'},
   {"filesystem", no_argument, 0, 'f'},
+  {"secure", no_argument, 0, 's'},
   {"terse", no_argument, 0, 't'},
   {GETOPT_HELP_OPTION_DECL},
   {GETOPT_VERSION_OPTION_DECL},
@@ -345,7 +353,7 @@
 /* print statfs info */
 static void
 print_statfs (char *pformat, char m, char const *filename,
-	      void const *data)
+	      void const *data,SECURITY_ID_T scontext)
 {
   STRUCT_STATVFS const *statfsbuf = data;
 
@@ -407,7 +415,10 @@
       strcat (pformat, PRIdMAX);
       printf (pformat, (intmax_t) (statfsbuf->f_ffree));
       break;
-
+    case 'C':
+      strcat (pformat, "s");
+      printf(scontext);
+      break;
     default:
       strcat (pformat, "c");
       printf (pformat, m);
@@ -417,7 +428,7 @@
 
 /* print stat info */
 static void
-print_stat (char *pformat, char m, char const *filename, void const *data)
+print_stat (char *pformat, char m, char const *filename, void const *data, SECURITY_ID_T scontext)
 {
   struct stat *statbuf = (struct stat *) data;
   struct passwd *pw_ent;
@@ -553,6 +564,10 @@
       strcat (pformat, "d");
       printf (pformat, (int) statbuf->st_ctime);
       break;
+    case 'C':
+      strcat (pformat, "s");
+      printf(pformat,scontext);
+      break;
     default:
       strcat (pformat, "c");
       printf (pformat, m);
@@ -562,8 +577,8 @@
 
 static void
 print_it (char const *masterformat, char const *filename,
-	  void (*print_func) (char *, char, char const *, void const *),
-	  void const *data)
+	  void (*print_func) (char *, char, char const *, void const *,SECURITY_ID_T ),
+	  void const *data,  SECURITY_ID_T scontext)
 {
   char *b;
 
@@ -598,7 +613,7 @@
 	      putchar ('%');
 	      break;
 	    default:
-	      print_func (dest, *p, filename, data);
+	      print_func (dest, *p, filename, data,scontext);
 	      break;
 	    }
 	}
@@ -615,9 +630,17 @@
 
 /* stat the filesystem and print what we find */
 static void
-do_statfs (char const *filename, int terse, char const *format)
+do_statfs (char const *filename, int terse, int secure, char const *format)
 {
   STRUCT_STATVFS statfsbuf;
+  SECURITY_ID_T scontext = NULL;
+#ifdef WITH_SELINUX
+  if(secure)
+    if (getfilecon(filename,&scontext)<0) {
+      perror (filename);
+      return;
+    }
+#endif
   int i = statfs (filename, &statfsbuf);
 
   if (i == -1)
@@ -629,23 +652,40 @@
 
   if (format == NULL)
     {
-      format = (terse
-		? "%n %i %l %t %b %f %a %s %c %d"
-		: "  File: \"%n\"\n"
-		"    ID: %-8i Namelen: %-7l Type: %T\n"
-		"Blocks: Total: %-10b Free: %-10f Available: %-10a Size: %s\n"
-		"Inodes: Total: %-10c Free: %-10d");
-    }
-
-  print_it (format, filename, print_statfs, &statfsbuf);
+      if (terse) {
+	if(secure)
+	  format = "%n %i %l %t %b %f %a %s %c %d %C";
+	else
+	  format = "%n %i %l %t %b %f %a %s %c %d";
+      } 
+      else 
+	{
+	  if(secure)
+	    format = "  File: \"%n\"\n"
+	      "    ID: %-8i Namelen: %-7l Type: %T\n"
+	      "Blocks: Total: %-10b Free: %-10f Available: %-10a Size: %s\n"
+	      "Inodes: Total: %-10c Free: %-10d\n"
+	      "   S_Context: %C\n";
+	  else	
+	    format= "  File: \"%n\"\n"
+	      "    ID: %-8i Namelen: %-7l Type: %T\n"
+	      "Blocks: Total: %-10b Free: %-10f Available: %-10a Size: %s\n"
+	      "Inodes: Total: %-10c Free: %-10d";
+	}	
+    }
+  print_it (format, filename, print_statfs, &statfsbuf,scontext);
+#ifdef WITH_SELINUX
+  if (scontext != NULL)
+    freecon(scontext);
+#endif
 }
-
 /* stat the file and print what we find */
 static void
-do_stat (char const *filename, int follow_links, int terse,
+  do_stat (char const *filename, int follow_links, int terse,int secure,
 	 char const *format)
 {
   struct stat statbuf;
+  SECURITY_ID_T scontext = NULL;
   int i = ((follow_links == 1)
 	   ? stat (filename, &statbuf)
 	   : lstat (filename, &statbuf));
@@ -656,11 +696,28 @@
       return;
     }
 
+#ifdef WITH_SELINUX
+  if(secure) {
+    if (link) 
+      i=lgetfilecon(filename, &scontext);
+    else
+      i=getfilecon(filename, &scontext);
+    if (i == -1)
+      {
+	perror (filename);
+	return;
+      }
+  }
+#endif
+
   if (format == NULL)
     {
       if (terse != 0)
 	{
-	  format = "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %o";
+	   if (secure)
+		  format = "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %o %C";
+	   else
+	     format = "%n %s %b %f %u %g %D %i %h %t %T %X %Y %Z %o";
 	}
       else
 	{
@@ -668,7 +725,17 @@
 	  i = statbuf.st_mode & S_IFMT;
 	  if (i == S_IFCHR || i == S_IFBLK)
 	    {
-	      format =
+          	if (secure)
+               		format =
+			  "  File: %N\n"
+			  "  Size: %-10s\tBlocks: %-10b IO Block: %-6o %F\n"
+			  "Device: %Dh/%dd\tInode: %-10i  Links: %-5h"
+			  " Device type: %t,%T\n"
+			  "Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\n"
+			  "   S_Context: %C\n"
+			  "Access: %x\n" "Modify: %y\n" "Change: %z\n";
+        	else
+	       format =
 		"  File: %N\n"
 		"  Size: %-10s\tBlocks: %-10b IO Block: %-6o %F\n"
 		"Device: %Dh/%dd\tInode: %-10i  Links: %-5h"
@@ -678,6 +745,15 @@
 	    }
 	  else
 	    {
+	   	if (secure)
+		  format =
+		    "  File: %N\n"
+		    "  Size: %-10s\tBlocks: %-10b IO Block: %-6o %F\n"
+		    "Device: %Dh/%dd\tInode: %-10i  Links: %-5h\n"
+		    "Access: (%04a/%10.10A)  Uid: (%5u/%8U)   Gid: (%5g/%8G)\n"
+		    "S_Context: %C\n"
+		    "Access: %x\n" "Modify: %y\n" "Change: %z\n";
+                else
 	      format =
 		"  File: %N\n"
 		"  Size: %-10s\tBlocks: %-10b IO Block: %-6o %F\n"
@@ -687,7 +763,11 @@
 	    }
 	}
     }
-  print_it (format, filename, print_stat, &statbuf);
+  print_it (format, filename, print_stat, &statbuf,scontext);
+#ifdef WITH_SELINUX
+  if (scontext) 
+    freecon(scontext);
+#endif
 }
 
 void
@@ -705,6 +785,7 @@
   -f, --filesystem      display filesystem status instead of file status\n\
   -c  --format=FORMAT   use the specified FORMAT instead of the default\n\
   -L, --dereference     follow links\n\
+  -s, --secure          print the information in terse form\n\
   -t, --terse           print the information in terse form\n\
 "), stdout);
       fputs (HELP_OPTION_DESCRIPTION, stdout);
@@ -756,6 +837,7 @@
   %c   Total file nodes in file system\n\
   %d   Free file nodes in file system\n\
   %f   Free blocks in file system\n\
+  %C - Security context in SELinux\n\
 "), stdout);
       fputs (_("\
   %i   File System id in hex\n\
@@ -778,6 +860,7 @@
   int follow_links = 0;
   int fs = 0;
   int terse = 0;
+  int secure = 0;
   char *format = NULL;
 
   initialize_main (&argc, &argv);
@@ -788,7 +871,7 @@
 
   atexit (close_stdout);
 
-  while ((c = getopt_long (argc, argv, "c:fLlt", long_options, NULL)) != -1)
+  while ((c = getopt_long (argc, argv, "sc:fLlt", long_options, NULL)) != -1)
     {
       switch (c)
 	{
@@ -810,6 +893,14 @@
 	case 't':
 	  terse = 1;
 	  break;
+	case 's':
+	  if(is_selinux_enabled())
+	    secure = 1;
+	  else {
+	    error (0, 0, _("Kernel is not SELinux enabled"));
+	    usage (EXIT_FAILURE);
+	  }
+	  break;
 
 	case_GETOPT_HELP_CHAR;
 
@@ -829,9 +920,9 @@
   for (i = optind; i < argc; i++)
     {
       if (fs == 0)
-	do_stat (argv[i], follow_links, terse, format);
+	do_stat (argv[i], follow_links, terse, secure, format);
       else
-	do_statfs (argv[i], terse, format);
+	do_statfs (argv[i], terse, secure, format);
     }
 
   exit (G_fail ? EXIT_FAILURE : EXIT_SUCCESS);
diff -urN coreutils-5.2.1.orig/tests/cp/Makefile.am coreutils-5.2.1/tests/cp/Makefile.am
--- coreutils-5.2.1.orig/tests/cp/Makefile.am	2004-03-12 12:09:03.000000000 -0600
+++ coreutils-5.2.1/tests/cp/Makefile.am	2004-06-17 13:42:52.134656244 -0500
@@ -3,8 +3,8 @@
 
 TESTS = \
   preserve-2 r-vs-symlink link-preserve \
-  backup-1 no-deref-link1 no-deref-link2 no-deref-link3 backup-is-src \
-  same-file cp-mv-backup symlink-slash slink-2-slink fail-perm dir-slash \
+  backup-1 backup-is-src \
+  cp-mv-backup symlink-slash slink-2-slink fail-perm dir-slash \
   perm cp-HL special-bits link dir-rm-dest cp-parents deref-slink \
   dir-vs-file into-self
 EXTRA_DIST = $(TESTS)
diff -urN coreutils-5.2.1.orig/tests/cp/Makefile.in coreutils-5.2.1/tests/cp/Makefile.in
--- coreutils-5.2.1.orig/tests/cp/Makefile.in	2004-03-12 12:09:03.000000000 -0600
+++ coreutils-5.2.1/tests/cp/Makefile.in	2004-06-17 13:42:52.137655962 -0500
@@ -260,8 +260,8 @@
 AUTOMAKE_OPTIONS = 1.1 gnits
 TESTS = \
   preserve-2 r-vs-symlink link-preserve \
-  backup-1 no-deref-link1 no-deref-link2 no-deref-link3 backup-is-src \
-  same-file cp-mv-backup symlink-slash slink-2-slink fail-perm dir-slash \
+  backup-1 backup-is-src \
+  cp-mv-backup symlink-slash slink-2-slink fail-perm dir-slash \
   perm cp-HL special-bits link dir-rm-dest cp-parents deref-slink \
   dir-vs-file into-self
 
diff -urN coreutils-5.2.1.orig/tests/mv/Makefile.am coreutils-5.2.1/tests/mv/Makefile.am
--- coreutils-5.2.1.orig/tests/mv/Makefile.am	2004-03-12 12:09:04.000000000 -0600
+++ coreutils-5.2.1/tests/mv/Makefile.am	2004-06-17 13:42:52.138655868 -0500
@@ -10,10 +10,10 @@
   i-link-no \
   part-fail \
   dup-source childproof i-4 update i-2 mv-special-1 \
-  into-self into-self-2 into-self-3 into-self-4 \
+  into-self into-self-3 \
   backup-is-src \
   i-1 hard-link-1 force partition-perm to-symlink dir-file diag \
-  part-symlink part-rename trailing-slash
+  part-rename trailing-slash
 
 EXTRA_DIST = $(TESTS) setup vfat
 TESTS_ENVIRONMENT = \
diff -urN coreutils-5.2.1.orig/tests/mv/Makefile.in coreutils-5.2.1/tests/mv/Makefile.in
--- coreutils-5.2.1.orig/tests/mv/Makefile.in	2004-03-12 12:09:04.000000000 -0600
+++ coreutils-5.2.1/tests/mv/Makefile.in	2004-06-17 13:42:52.141655587 -0500
@@ -267,10 +267,10 @@
   i-link-no \
   part-fail \
   dup-source childproof i-4 update i-2 mv-special-1 \
-  into-self into-self-2 into-self-3 into-self-4 \
+  into-self into-self-3 \
   backup-is-src \
   i-1 hard-link-1 force partition-perm to-symlink dir-file diag \
-  part-symlink part-rename trailing-slash
+  part-rename trailing-slash
 
 EXTRA_DIST = $(TESTS) setup vfat
 TESTS_ENVIRONMENT = \
