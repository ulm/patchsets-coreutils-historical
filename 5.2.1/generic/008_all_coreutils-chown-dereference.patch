Georgi Georgiev writes:

It seems like an old, old problem with chown has surfaced again. At least, I 
have the same problem that is described at 
http://lists.gnu.org/archive/html/bug-fileutils/2000-12/msg00008.html and I 
did not have it a few months back.

  # ls -l
  total 4
  -rw-r--r--   1 user1    users           5 Oct 26 14:33 regularfile
  lrwxrwxrwx   1 user1    users          11 Oct 26 14:34 symlink -> regularfile

  # chown -v user2 symlink ; ls -l
  owner of symlink changed to user2
  total 4
  -rw-r--r--   1 user1    users           5 Oct 26 14:33 regularfile
  lrwxrwxrwx   1 user2    users          11 Oct 26 14:34 symlink -> regularfile

  # chown -v --dereference user2 symlink; ls -l
  owner of symlink retained as user2
  total 4
  -rw-r--r--   1 user1   users           5 Oct 26 14:33 regularfile
  lrwxrwxrwx   1 user2   users          11 Oct 26 14:34 symlink -> regularfile

Grabbed updates from coreutils cvs to resolve this.
http://bugs.gentoo.org/show_bug.cgi?id=53750

===================================================================
RCS file: /cvsroot/coreutils/cvsroot/coreutils/coreutils/src/chown-core.c,v
retrieving revision 1.21
retrieving revision 1.22
diff -u -r1.21 -r1.22
--- coreutils/coreutils/src/chown-core.c	2004/05/01 14:33:41	1.21
+++ coreutils/coreutils/src/chown-core.c	2004/05/16 21:39:35	1.22
@@ -175,7 +175,9 @@
 		   struct Chown_option const *chopt)
 {
   const char *file_full_name = ent->fts_path;
-  struct stat *file_stats = ent->fts_statp;
+  struct stat const *file_stats = ent->fts_statp;
+  struct stat const *target_stats;
+  struct stat stat_buf;
   int errors = 0;
 
   /* This is the second time we've seen this directory.  */
@@ -207,12 +209,28 @@
       return 1;
     }
 
-  if ((old_uid == (uid_t) -1 || file_stats->st_uid == old_uid)
-      && (old_gid == (gid_t) -1 || file_stats->st_gid == old_gid))
+  /* If this is a symlink and we're dereferencing them,
+     stat it to get the permissions of the referent.  */
+  if (S_ISLNK (file_stats->st_mode) && chopt->affect_symlink_referent)
     {
-      uid_t new_uid = (uid == (uid_t) -1 ? file_stats->st_uid : uid);
-      gid_t new_gid = (gid == (gid_t) -1 ? file_stats->st_gid : gid);
-      if (new_uid != file_stats->st_uid || new_gid != file_stats->st_gid)
+      if (stat (ent->fts_accpath, &stat_buf) != 0)
+	{
+	  error (0, errno, _("cannot dereference %s"), quote (file_full_name));
+	  return 1;
+	}
+      target_stats = &stat_buf;
+    }
+  else
+    {
+      target_stats = file_stats;
+    }
+
+  if ((old_uid == (uid_t) -1 || target_stats->st_uid == old_uid)
+      && (old_gid == (gid_t) -1 || target_stats->st_gid == old_gid))
+    {
+      uid_t new_uid = (uid == (uid_t) -1 ? target_stats->st_uid : uid);
+      gid_t new_gid = (gid == (gid_t) -1 ? target_stats->st_gid : gid);
+      if (new_uid != target_stats->st_uid || new_gid != target_stats->st_gid)
 	{
 	  const char *file = ent->fts_accpath;
 	  int fail;
